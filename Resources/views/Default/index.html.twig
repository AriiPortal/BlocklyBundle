{% extends "AriiBlocklyBundle::layout.html.twig" %}
{% block body %}
{% set color_job=5 %}
{% set color_shell=15 %}
{% set color_user=25 %}
{% set color_action=30 %}
{% set color_chain=55 %}
{% set color_nodes=65 %}
{% set color_nested=80 %}
{% set color_params=105 %}
{% set color_triggers=135 %}
{% set color_schedule=160 %}
{% set color_runtime=165 %}
{% set color_time=170 %}
{% set color_date=175 %}
{% set color_days=180 %}
{% set color_holidays=185 %}
{% set color_lock=210 %}
{% set color_agent=235 %}
{% set color_monitor=260 %}
{% set color_command=285 %}
{% set color_misc=315 %}
{% set color_script=340 %}
<div id="blocklyDiv"  style="height: 100%; width: 100%;"></div>
<div id="blocklyArea"></div>
<xml id="toolbox" style="display: none">
    <category name="{{ "Jobs" | trans }}" colour="{{ color_job }}">
<block type="job">
  <b><mutation job.description="true"></mutation></b>
  <field name="DESCRIPTION">DESCRIPTION</field>
</block>        <category name="{{ "Shell scripts" | trans }}" colour="{{ color_shell }}">
            <block type="script"></block>
        </category>                
<!--        <category name="{{ "Integrated jobs" | trans }}"colour="{{ color_action }}">
            <block type="ssh"></block>            
        </category>                
-->        <category name="{{ "User jobs" | trans }}" colour="{{ color_user}}">
        {% for script in scripts %}
            <block type="USER_{{ script.label }}"></block>
        {% endfor %}
        </category>
    </category>
{%if level > 1 %}        
    <category name="{{ "Chains" | trans }}" colour="{{ color_chain }}">
      <block type="job_chain"></block>
        <block type="job"></block>
      <category name="{{ "Nodes" | trans }}" colour="{{ color_nodes }}">
        <block type="job_chain_node"></block>
        <block type="job_chain_error"></block>
        <block type="job_chain_goto"></block>
        <block type="end_node"></block>
        <block type="sink_node"></block>
      </category>
    <category name="{{ "Orders" | trans }}" colour="{{ color_triggers }}">
        <block type="order"></block>
        <block type="file_order_source"></block>
    </category>
    </category>
{% endif %}   
{%if level > 2 %}
    <category name="Nested chains" colour="{{ color_nested }}">
		<block type="nested_chain"></block>
		<block type="job_chain_node_job_chain"></block>
    </category>
{% endif %}                
    <category name="{{ "Schedule" | trans }}" colour="{{ color_schedule }}">
        <block type="schedule"></block>
        <block type="run_time.schedule"></block>
        <block type="run_time.single"></block>
        <block type="run_time.repeat"></block>
        <block type="run_time.days"></block>
        <block type="run_time.months"></block>
{%if level > 1 %}        
        <block type="run_time.once"></block>
{% endif %}
{%if level > 2 %}                
        <block type="run_time.free"></block>
{% endif %}        
      <category name="{{ "Time" | trans }}" colour="{{ color_time }}">
            <block type="at"></block>
            <block type="period.single_start"></block>
            <block type="period.repeat"></block>
      </category> 
      <category name="{{ "Date" | trans }}" colour="{{ color_date }}">
        <block type="date"></block>
      </category> 
      <category name="{{ "Days" | trans }}" colour="{{ color_days }}">
            <block type="weekdays"></block>
            <block type="monthdays"></block>
            <block type="ultimos"></block>
            <block type="specific_weekdays"></block>
      </category> 
{% if level > 2 %}
        <category name="{{ "Advanced" | trans }}">
          <block type="weekday"></block>
          <block type="monthday"></block>      
      </category> 
{% endif %}
      <category name="Holidays"  colour="{{ color_holidays }}">
          <block type="holidays"></block>
          <block type="holiday"></block>
      </category> 
    </category>
    <category name="{{ "Parameters" | trans }}" colour="{{ color_params }}">
        <block type="param"></block>
{%if level > 1 %}
    <block type="params"></block>
{% endif %}
        <block type="script_param"></block>
    </category>
    <category name="{{ "Lock" | trans }}" colour="{{ color_lock }}">
      <block type="lock"></block>
      <block type="lock_use"></block>
    </category>
    <category name="{{ "Agent" | trans }}" colour="{{ color_agent }}">
      <block type="process_class"></block>
    </category>
{%if level > 2 %}
    <category name="{{ "Monitor" | trans }} "colour="{{ color_monitor }}">
        <block type="event"></block>
    </category>
{% endif %}
    <category name="{{ "Misc" | trans }}" colour="{{ color_misc }}">
	  <block type="text"></block>
      <block type="include"></block>
    </category>
  </xml>
<script language="javascript">
var blocklyArea;
var blocklyDiv;
var workspace;

/* 
===========================================================================
	JOB SIMPLE
=========================================================================== 
*/
// https://blockly-demo.appspot.com/static/demos/blockfactory/index.html#mrrzai
Blockly.Blocks['job'] = {
  init: function() {
    this.appendDummyInput()
        .appendField("{{ "Job" | trans }}")
        .appendField(new Blockly.FieldVariable("job"), "JOB");
    this.appendDummyInput()
        .setAlign(Blockly.ALIGN_RIGHT)
        .appendField("{{ "Title" | trans }}")
        .appendField(new Blockly.FieldTextInput(""), "TITLE");
    this.appendDummyInput()
        .setAlign(Blockly.ALIGN_RIGHT)
        .appendField("{{ "Agent" | trans }}")
        .appendField(new Blockly.FieldVariable("localhost"), "PROCESS_CLASS");
    this.appendStatementInput("SCRIPT")
        .setCheck(null)
        .setAlign(Blockly.ALIGN_RIGHT)
        .appendField("{{ "Script" | trans }}");
    this.appendStatementInput("RUN_TIME")
        .setCheck(null)
        .setAlign(Blockly.ALIGN_RIGHT)
        .appendField("{{ "Run time" | trans }}");            
    this.appendStatementInput("PARAMS")
        .setCheck(null)
        .setAlign(Blockly.ALIGN_RIGHT)
        .appendField("{{ "Parameters" | trans }}");
    this.appendValueInput("INCLUDE_PARAM")
        .setCheck(null);
    this.appendStatementInput("LOCKS")
        .setCheck(null)
        .setAlign(Blockly.ALIGN_RIGHT)
        .appendField("{{ "Locks" | trans }}");
    this.appendStatementInput("SETBACK")
        .setCheck(null)
        .setAlign(Blockly.ALIGN_RIGHT)
        .appendField("{{ "Setback" | trans }}");
    this.appendStatementInput("COMMANDS")
        .setCheck(null)
        .setAlign(Blockly.ALIGN_RIGHT)
        .appendField("{{ "Commands" | trans }}");
    this.appendDummyInput()
        .setAlign(Blockly.ALIGN_RIGHT)
        .appendField("{{ "Tasks" | trans }}")
        .appendField(new Blockly.FieldTextInput("1"), "TASKS");
    this.appendDummyInput("WARN_IF_LONGER_THAN")
        .setAlign(Blockly.ALIGN_RIGHT)
        .appendField("{{ "Warn if longer than" | trans }}")
        .appendField(new Blockly.FieldTextInput(""), "WARN_IF_LONGER_THAN");
    this.appendDummyInput("WARN_IF_SHORTER_THAN")
        .setAlign(Blockly.ALIGN_RIGHT)
        .appendField("{{ "Warn if shorter than" | trans }}")
        .appendField(new Blockly.FieldTextInput(""), "WARN_IF_SHORTER_THAN");
    this.appendValueInput("DESCRIPTION")
        .setCheck(null)
        .setAlign(Blockly.ALIGN_RIGHT)
        .appendField("{{ "Description" | trans }}")
        .appendField(new Blockly.FieldTextInput(""), "DESCRIPTION"); 
    this.setPreviousStatement(false, null);
    this.setNextStatement(false, null);
    this.setColour({{ color_job }});
    this.setTooltip('');
    this.setHelpUrl('http://www.sos-berlin.com/doc/en/scheduler.doc/xml/job.xml');
    this.setMutator(new Blockly.Mutator(
            [ 'job.run_time', 'job.params', 'job.locks', 'job.commands', 'job.setback', 'job.warn', 'job.description' ]));
    
    this.run_time = 'false'; 
    this.params = 'false'; 
    this.locks = 'false'; 
    this.commands = 'false'; 
    this.setback = 'false'; 
    this.warn = 'false'; 
    this.description = 'false';
  },
    // Ecriture XML
    mutationToDom: function() {
        var container = document.createElement('mutation');
        container.setAttribute('description', (this.description == 'true'));
      return container;
    },
    // Lecture XML
    domToMutation: function(xmlElement) {
        if (xmlElement.getAttribute('run_time')=='true') { this.run_time = 'true';  } 
            else { this.removeInput("RUN_TIME"); }
        if (xmlElement.getAttribute('params')=='true') { this.params = 'true';  } 
            else { 
                this.removeInput("PARAMS"); 
                this.removeInput("INCLUDE_PARAMS"); 
            }
        if (xmlElement.getAttribute('locks')=='true') { this.locks = 'true'; }
            else { this.removeInput("LOCKS"); }
        if (xmlElement.getAttribute('commands')=='true') { this.commands = 'true'; }
            else { this.removeInput("COMMANDS"); }
        if (xmlElement.getAttribute('setback')=='true') { this.setback = 'true'; }
            else { this.removeInput("SETBACK"); }
        if (xmlElement.getAttribute('warn')=='true') { this.warn = 'true'; }
            else { 
                this.removeInput("WARN_IF_LONGER_THAN"); 
                this.removeInput("WARN_IF_SHORTER_THAN"); 
            }
        if (xmlElement.getAttribute('description')=='true') { this.description = 'true'; }
            else { this.removeInput("DESCRIPTION"); }
    },
    decompose: function(workspace) {
      var topBlock = Blockly.Block.obtain(workspace, 'job.options');
      topBlock.initSvg();
      var connection = topBlock.getInput('OPTIONS').connection;
      
      if (this.run_time=='true') {
        var run_timeBlock = Blockly.Block.obtain(workspace, 'job.run_time');
        run_time.initSvg();
        connection.connect(run_timeBlock.previousConnection);
      }      
      if (this.params=='true') {
        var paramsBlock = Blockly.Block.obtain(workspace, 'job.params');
        paramsBlock.initSvg();
        connection.connect(paramsBlock.previousConnection);
      }      
      if (this.locks=='true') {
        var locksBlock = Blockly.Block.obtain(workspace, 'job.locks');
        locksBlock.initSvg();
        connection.connect(locksBlock.previousConnection);
      }      
      if (this.commands=='true') {
        var commandsBlock = Blockly.Block.obtain(workspace, 'job.commands');
        commandsBlock.initSvg();
        connection.connect(commandsBlock.previousConnection);
      }      
      if (this.setback=='true') {
        var setbackBlock = Blockly.Block.obtain(workspace, 'job.setback');
        setbackBlock.initSvg();
        connection.connect(setbackBlock.previousConnection);
      }      
      if (this.warn=='true') {
        var warnBlock = Blockly.Block.obtain(workspace, 'job.warn');
        warnBlock.initSvg();
        connection.connect(warnBlock.previousConnection);
      }      
      if (this.description=='true') {
        var descriptionBlock = Blockly.Block.obtain(workspace, 'job.description');
        descriptionBlock.initSvg();
        connection.connect(descriptionBlock.previousConnection);
      }      
      return topBlock;
    },
    compose: function(topBlock) {          
        if (this.run_time == 'true') {
            this.removeInput('RUN_TIME');
            this.run_time = 'false';
        }        
        if (this.params == 'true') {
            this.removeInput('PARAMS');
            this.removeInput("INCLUDE_PARAMS"); 
            this.params = 'false';
        }        
        if (this.locks == 'true') {
            this.removeInput('LOCKS');
            this.locks = 'false';
        }        
        if (this.commands == 'true') {
            this.removeInput('COMMANDS');
            this.commands = 'false';
        }        
        if (this.setback == 'true') {
            this.removeInput('SETBACK');
            this.setback = 'false';
        }        
        if (this.warn == 'true') {
            this.removeInput("WARN_IF_LONGER_THAN"); 
            this.removeInput("WARN_IF_SHORTER_THAN"); 
            this.warn = 'false';
        }        
        if (this.description == 'true') {
            this.removeInput('DESCRIPTION');
            this.description = 'false';
        }
    var clauseBlock = topBlock.getInputTargetBlock('OPTIONS');
    if (!clauseBlock) 
        return;
    while (clauseBlock) {
      switch (clauseBlock.type) {
        case 'job.run_time':
            if (this.run_time == 'false') {
                this.appendStatementInput("RUN_TIME")
                    .setCheck(null)
                    .setAlign(Blockly.ALIGN_RIGHT)
                    .appendField("{{ "Run time" | trans }}");
                this.run_time = 'true';
            }
          break;
        case 'job.params':
            if (this.params == 'false') {
                this.appendStatementInput("PARAMS")
                    .setCheck(null)
                    .setAlign(Blockly.ALIGN_RIGHT)
                    .appendField("{{ "Parameters" | trans }}");
                this.appendValueInput("INCLUDE_PARAM")
                    .setCheck(null);
                this.run_time = 'true';
            }
          break;
        case 'job.locks':
            if (this.locks == 'false') {
                this.appendStatementInput("LOCKS")
                    .setCheck(null)
                    .setAlign(Blockly.ALIGN_RIGHT)
                    .appendField("{{ "Locks" | trans }}");
                this.locks = 'true';
            }
          break;
        case 'job.commands':
            if (this.commands == 'false') {
                this.appendStatementInput("COMMANDS")
                    .setCheck(null)
                    .setAlign(Blockly.ALIGN_RIGHT)
                    .appendField("{{ "Commands" | trans }}");
                this.commands = 'true';
            }
          break;
        case 'job.setback':
            if (this.setback == 'false') {
                this.appendStatementInput("SETBACK")
                    .setCheck(null)
                    .setAlign(Blockly.ALIGN_RIGHT)
                    .appendField("{{ "Setback" | trans }}");
                this.setback = 'true';
            }
          break;
        case 'job.warn':
            if (this.warn == 'false') {
                this.appendDummyInput("WARN_IF_LONGER_THAN")
                    .setAlign(Blockly.ALIGN_RIGHT)
                    .appendField("{{ "Warn if longer than" | trans }}")
                    .appendField(new Blockly.FieldTextInput(""), "WARN_IF_LONGER_THAN");
                this.appendDummyInput("WARN_IF_SHORTER_THAN")
                    .setAlign(Blockly.ALIGN_RIGHT)
                    .appendField("{{ "Warn if shorter than" | trans }}")
                    .appendField(new Blockly.FieldTextInput(""), "WARN_IF_SHORTER_THAN");
                this.warn = 'true';
            }
          break;
        case 'job.description':
            if (this.description == 'false') {
                this.appendValueInput("DESCRIPTION")
                       .setCheck(null)
                       .setAlign(Blockly.ALIGN_RIGHT)
                       .appendField("{{ "Description" | trans }}")
                       .appendField(new Blockly.FieldTextInput(""), "DESCRIPTION");    
                this.description = 'true';
            }
          break;
        default:
          throw 'Unknown block type.';
      }
      clauseBlock = clauseBlock.nextConnection &&
          clauseBlock.nextConnection.targetBlock();      
    }
    }
};

Blockly.Blocks['job.options'] = {
  init: function() {
    this.appendStatementInput("OPTIONS")
        .setCheck(null)
        .setAlign(Blockly.ALIGN_RIGHT)
        .appendField("{{ "Options" | trans }}");
    this.setPreviousStatement(false, null);
    this.setNextStatement(false, null);
    this.setColour({{ color_job }});
    this.setTooltip('');
    this.setHelpUrl('http://www.sos-berlin.com/doc/en/scheduler.doc/xml/job.xml');
  }
};
Blockly.Blocks['job.params'] = {
  init: function() {
    this.appendDummyInput()
        .appendField("{{ "Parameters" | trans }}");
    this.setPreviousStatement(true, null);
    this.setNextStatement(true, null);
    this.setColour({{ color_params }});
  }
};
Blockly.Blocks['job.locks'] = {
  init: function() {
    this.appendDummyInput()
        .appendField("{{ "Locks" | trans }}");
    this.setPreviousStatement(true, null);
    this.setNextStatement(true, null);
    this.setColour({{ color_lock }});
  }
};
Blockly.Blocks['job.commands'] = {
  init: function() {
    this.appendDummyInput()
        .appendField("{{ "Commands" | trans }}");
    this.setPreviousStatement(true, null);
    this.setNextStatement(true, null);
    this.setColour({{ color_job }});
  }
};
Blockly.Blocks['job.setback'] = {
  init: function() {
    this.appendDummyInput()
        .appendField("{{ "Setback" | trans }}");
    this.setPreviousStatement(true, null);
    this.setNextStatement(true, null);
    this.setColour({{ color_job }});
  }
};
Blockly.Blocks['job.warn'] = {
  init: function() {
    this.appendDummyInput()
        .setAlign(Blockly.ALIGN_RIGHT)
        .appendField("{{ "Warn if longer than" | trans }}")
        .appendField(new Blockly.FieldTextInput(""), "WARN_IF_LONGER_THAN");
    this.appendDummyInput()
        .setAlign(Blockly.ALIGN_RIGHT)
        .appendField("{{ "Warn if shorter than" | trans }}")
        .appendField(new Blockly.FieldTextInput(""), "WARN_IF_SHORTER_THAN");
    this.setPreviousStatement(true, null);
    this.setNextStatement(true, null);
    this.setColour({{ color_job }});
  }
};
Blockly.Blocks['job.description'] = {
  init: function() {
    this.appendDummyInput()
        .appendField("{{ "Description" | trans }}")
        .appendField(new Blockly.FieldTextInput(""), "DESCRIPTION");
    this.setPreviousStatement(true, null);
    this.setNextStatement(true, null);
    this.setColour({{ color_job }});
  }
};
Blockly.Blocks['job.setback'] = {
  init: function() {
    this.appendDummyInput()
        .appendField("{{ "Setback" | trans }}")
        .appendField(new Blockly.FieldTextInput(""), "SETBACK");
    this.setPreviousStatement(true, null);
    this.setNextStatement(true, null);
    this.setColour({{ color_job }});
  }
};
Blockly.Blocks['job.run_time'] = {
  init: function() {
    this.appendDummyInput("RUN_TIME")
        .appendField("{{ "Run time" | trans }}");
    this.setPreviousStatement(true, null);
    this.setNextStatement(true, null);
    this.setColour({{ color_schedule }});
  }
};
Blockly.JobScheduler['job'] = function(block) {
  var variable_job = Blockly.JobScheduler.variableDB_.getName(block.getFieldValue('JOB'), Blockly.Variables.NAME_TYPE);
  var text_title = block.getFieldValue('TITLE');
  var text_description = block.getFieldValue('DESCRIPTION');
  var value_description = Blockly.JobScheduler.valueToCode(block, 'DESCRIPTION', Blockly.JobScheduler.ORDER_NONE);
  var variable_process_class = Blockly.JobScheduler.variableDB_.getName(block.getFieldValue('PROCESS_CLASS'), Blockly.Variables.NAME_TYPE);
  var text_tasks = block.getFieldValue('TASKS');
  var text_warn_if_longer_than = block.getFieldValue('WARN_IF_LONGER_THAN');
  var text_warn_if_shorter_than = block.getFieldValue('WARN_IF_SHORTER_THAN');
  var statements_locks = Blockly.JobScheduler.statementToCode(block, 'LOCKS');
  var statements_script = Blockly.JobScheduler.statementToCode(block, 'SCRIPT');
  var statements_params = Blockly.JobScheduler.statementToCode(block, 'PARAMS');
  var value_include_param = Blockly.JobScheduler.valueToCode(block, 'INCLUDE_PARAM', Blockly.JobScheduler.ORDER_NONE);
  var statements_setback = Blockly.JobScheduler.statementToCode(block, 'SETBACK');
  if ((block.run_time == 'false') & (statements_setback)) {
      block.removeInput('RUN_TIME');
  }
  var statements_run_time = Blockly.JobScheduler.statementToCode(block, 'RUN_TIME');
  var statements_commands = Blockly.JobScheduler.statementToCode(block, 'COMMANDS');
  var code = FileStart(variable_job,'job');
        code += '<job name="'+variable_job+'"\n'
		+'title="'+text_title+'"\n'
		+'order="no"\n';
		+'tasks="'+text_tasks+'"\n';
		+'warn_if_longer_than="'+text_warn_if_longer_than+'"\n';
		+'warn_if_shorter_than="'+text_warn_if_shorter_than+'"\n';
        if (variable_process_class !== 'localhost')
            code += ' process_class="'+variable_process_class+'"';
        code += '>\n';
		code += '<description>\n';
		code += value_description;
		code += '<![CDATA['+text_description+']]>';
		code += '</description>\n';
        code += statements_locks;
        code += '<params>\n'+statements_params;
		code += value_include_param;
		code += '</params>\n';
        code += statements_script;
        code += statements_run_time;
        code += statements_commands;
	code += '</job>\n';
        code += FileEnd(variable_job,'job');
  return code;
};

// https://blockly-demo.appspot.com/static/demos/blockfactory/index.html#6jhdvs
Blockly.Blocks['script'] = {
  init: function() {
    this.appendDummyInput()
        .appendField("{{ "Script" | trans }}")
        .appendField(new Blockly.FieldDropdown([["unix shell", "shell"], ["windows command", "bat"],["javascript", "javascript"], ["perlscript", "perlscript"]]), "LANGUAGE");
    this.appendValueInput("INCLUDE_PARAMS")
        .setAlign(Blockly.ALIGN_RIGHT)
        .appendField("{{ "Code" | trans }}")
        .appendField(new Blockly.FieldTextInput(""), "CODE");
{% if level>1 %}
    this.appendValueInput("INCLUDE_FILE")
        .setCheck(null)
        .setAlign(Blockly.ALIGN_RIGHT)
        .appendField("{{ "File" | trans }}");
{% endif %}
    this.setPreviousStatement(true, null);
    this.setNextStatement(false, null);
    this.setColour({{ color_action }});
    this.setTooltip('');
    this.setHelpUrl('http://www.example.com/');
  }
};

Blockly.JobScheduler['script'] = function(block) {
  var text_code = block.getFieldValue('CODE');
  var dropdown_name = block.getFieldValue('LANGUAGE');
  var value_name = Blockly.JobScheduler.valueToCode(block, 'FILE', Blockly.JobScheduler.ORDER_ATOMIC);
  var value_script_param = Blockly.JobScheduler.valueToCode(block, 'INCLUDE_PARAMS', Blockly.JobScheduler.ORDER_NONE);
{% if level>1 %}var value_include_file = Blockly.JobScheduler.valueToCode(block, 'INCLUDE_FILE', Blockly.JobScheduler.ORDER_NONE);{% endif %}
  var code =  '<script  language="';
	if (dropdown_name=='bat')
		code += 'shell';
	else
		code += dropdown_name;
	code += '">\n';
{% if level>1 %}code += value_include_file ;{% endif %}
	code += '<![CDATA[';
	code += text_code;
	if (value_script_param!='') {
                var a = value_script_param.trim().split('\n');
		switch (dropdown_name) {                        
			case 'bat':
                            for (index = 0, len = a.length; index < len; ++index) {
                                if (a[index].substr(0,2)=='%%')
                                    code += ' %SCHEDULER_PARAM_'+a[index].substr(2).toUpperCase()+'%';
                                else 
                                    code += a[index];
                            }
                            break;
			case 'shell':
                            for (index = 0, len = a.length; index < len; ++index) {
                                if (a[index].substr(0,2)=='%%')
                                    code += ' ${SCHEDULER_PARAM_'+a[index].substr(2).toUpperCase()+'}';
                                else 
                                    code += a[index];
                            }
                            break;
			default:
				code += value_script_param;
		}
	}
	code +=']]>\n';
	code += '<\/script>\n';
  return code;
};

// https://blockly-demo.appspot.com/static/demos/blockfactory/index.html#ij2gzm
Blockly.Blocks['process_class'] = {
  init: function() {
    this.appendDummyInput()
        .setAlign(Blockly.ALIGN_RIGHT)
        .appendField("{{ "Process class" | trans }}")
        .appendField(new Blockly.FieldVariable("localhost"), "PROCESS_CLASS");
    this.appendDummyInput()
        .setAlign(Blockly.ALIGN_RIGHT)
        .appendField("{{ "Max processes" | trans }}")
        .appendField(new Blockly.FieldTextInput("3"), "MAX_PROCESSES");
    this.appendDummyInput()
        .setAlign(Blockly.ALIGN_RIGHT)
        .appendField("{{ "Host" | trans }}")
        .appendField(new Blockly.FieldTextInput("localhost"), "HOST");
    this.appendDummyInput()
        .setAlign(Blockly.ALIGN_RIGHT)
        .appendField("{{ "Port" | trans }}")
        .appendField(new Blockly.FieldTextInput("44444"), "PORT");
    this.setInputsInline(false);
    this.setPreviousStatement(false, null);
    this.setNextStatement(false, null);
    this.setColour({{ color_agent }});
    this.setTooltip('');
    this.setHelpUrl('http://www.sos-berlin.com/doc/en/scheduler.doc/xml/process_classes.xml');
  }
};

Blockly.JobScheduler['process_class'] = function(block) {
  var variable_process_class = Blockly.JobScheduler.variableDB_.getName(block.getFieldValue('PROCESS_CLASS'), Blockly.Variables.NAME_TYPE)
  var text_max_processes = block.getFieldValue('MAX_PROCESSES');
  var text_host = block.getFieldValue('HOST');
  var text_port = block.getFieldValue('PORT');  
  var code = FileStart(variable_process_class,'process_class');
    code += '<process_class name="'+variable_process_class+'" max_processes="'+text_max_processes+'" remote_scheduler="'+text_host+':'+text_port+'">\n';
    code += FileEnd(variable_process_class,'process_class');
  return code;
};

/* 
===========================================================================
	JOB CHAIN
=========================================================================== 
*/
// https://blockly-demo.appspot.com/static/demos/blockfactory/index.html#g6bsxw
Blockly.Blocks['job_chain'] = {
  init: function() {
    this.appendDummyInput()
        .appendField("job_chain")
        .appendField(new Blockly.FieldTextInput("job_chain"), "name");
    this.appendDummyInput()
        .setAlign(Blockly.ALIGN_RIGHT)
        .appendField("title")
        .appendField(new Blockly.FieldTextInput(""), "TITLE");
    this.appendDummyInput()
        .setAlign(Blockly.ALIGN_RIGHT)
        .appendField("process_class")
        .appendField(new Blockly.FieldVariable("localhost"), "PROCESS_CLASS");
    this.appendStatementInput("ORDERS")
        .setCheck(null)
        .setAlign(Blockly.ALIGN_RIGHT)
        .appendField("{{ "Orders" | trans }}");
    this.appendStatementInput("{{ "File order source" | trans }}")
        .setCheck(null)
        .setAlign(Blockly.ALIGN_RIGHT)
        .appendField("{{ "File order source" | trans }}");
    this.appendStatementInput("NODES")
        .setCheck(null)
        .setAlign(Blockly.ALIGN_RIGHT)
        .appendField("nodes");
    this.appendDummyInput()
        .setAlign(Blockly.ALIGN_RIGHT)
        .appendField("{{ "Max orders" | trans }}")
        .appendField(new Blockly.FieldTextInput(""), "MAX_ORDERS");
    this.appendDummyInput()
        .setAlign(Blockly.ALIGN_RIGHT)
        .appendField("{{ "Orders recoverable" | trans }}")
        .appendField(new Blockly.FieldCheckbox("TRUE"), "ORDERS_RECOVERABLE");
    this.appendDummyInput()
        .setAlign(Blockly.ALIGN_RIGHT)
        .appendField("distributed")
        .appendField(new Blockly.FieldCheckbox("FALSE"), "DISTRIBUTED");
    this.setColour({{ color_chain }});		
    this.setTooltip('');
    this.setHelpUrl('http://www.sos-berlin.com/doc/en/scheduler.doc/xml/job_chain.xml');
  }
};

Blockly.JobScheduler['job_chain'] = function(block) {
  var text_name = block.getFieldValue('name');
  var text_title = block.getFieldValue('title');
  var text_max_orders = block.getFieldValue('max_orders');
  var variable_process_class = Blockly.JobScheduler.variableDB_.getName(block.getFieldValue('PROCESS_CLASS'), Blockly.Variables.NAME_TYPE)
  var statements_file_order_source = Blockly.JobScheduler.statementToCode(block, 'file_order_source');
  var statements_nodes = Blockly.JobScheduler.statementToCode(block, 'NODES');
  var next = statements_nodes.split(' -->\n');
  var name_next_state = next.shift().trim().substr(10);
  var checkbox_distributed = block.getFieldValue('DISTRIBUTED') == 'TRUE';
  var checkbox_orders_recoverable = block.getFieldValue('ORDERS_RECOVERABLE') == 'TRUE';
  var code = FileStart(text_name,'job_chain');
        code += '<job_chain\n';
	code += '	name="'+text_name+'"\n';
	if (variable_process_class!='localhost') 
		code += '	process_class="'+variable_process_class+'"\n';
        if (text_max_orders>0)
            code += '	max_orders="'+text_max_orders +'"\n';
	code += '	distributed="'+checkbox_distributed+'"\n';
	code += '	orders_recoverable="'+checkbox_orders_recoverable+'"\n';
	code += '>\n';
	code += statements_file_order_source;
	code += next.join(' -->\n');
	code += '</job_chain>\n';
        code += FileEnd(text_name,'job_chain');
  return code;
};

// https://blockly-demo.appspot.com/static/demos/blockfactory/index.html#h3pm3t
Blockly.Blocks['job_chain_node'] = {
  init: function() {
    this.appendDummyInput()
        .appendField("{{ "State" | trans }}")
        .appendField(new Blockly.FieldTextInput("state"), "STATE");
    this.appendDummyInput()
        .setAlign(Blockly.ALIGN_RIGHT)
        .appendField("{{ "Job" | trans }}")
        .appendField(new Blockly.FieldVariable("job"), "JOB");
    this.appendStatementInput("NEXT_STATE")
	    .setAlign(Blockly.ALIGN_RIGHT)
	    .appendField("{{ "Next state" | trans }}")
        .setCheck(null);
    this.appendStatementInput("ERROR_STATE")
	    .setAlign(Blockly.ALIGN_RIGHT)
	    .appendField("{{ "Error state" | trans }}")
        .setCheck(null);
    this.appendDummyInput()
        .setAlign(Blockly.ALIGN_RIGHT)
        .appendField("on_error")
        .appendField(new Blockly.FieldDropdown([["", ""], ["suspend", "suspend"],["setback", "setback"]]), "ON_ERROR");
    this.appendDummyInput()
        .setAlign(Blockly.ALIGN_RIGHT)
        .appendField("delay")
        .appendField(new Blockly.FieldTextInput(""), "DELAY");
    this.setInputsInline(true);
    this.setPreviousStatement(true, null);
    this.setNextStatement(false, null);
    this.setColour("#009900");
    this.setTooltip('');
    this.setHelpUrl('http://www.sos-berlin.com/doc/en/scheduler.doc/xml/job_chain.xml#element_job_chain_node');
  }
};

Blockly.JobScheduler['job_chain_node'] = function(block) {
  var name = block.getFieldValue('STATE');
  var text_delay = block.getFieldValue('DELAY');
  var variable_job = Blockly.JobScheduler.variableDB_.getName(block.getFieldValue('JOB'), Blockly.Variables.NAME_TYPE);
  var statements_next_state = Blockly.JobScheduler.statementToCode(block, 'NEXT_STATE');
  var statements_error_state = Blockly.JobScheduler.statementToCode(block, 'ERROR_STATE');
  var dropdown_on_error = block.getFieldValue('ON_ERROR');
  var next = statements_next_state.split(' -->\n');
  var name_next_state = next.shift().trim().substr(10);
  var error = statements_error_state.split(' -->\n');
  var name_error_state = error.shift().trim().substr(10);
  var code = '<!-- STEP '+name+' -->\n'
        code += '<job_chain_node\n';
		code += '	state="'+name+'"\n';
		code += '	job="'+variable_job+'"\n';
		code += '	next_state="'+name_next_state+'"\n';
		code += '	error_state="'+name_error_state+'"\n';
		if (dropdown_on_error!='')
			code += '	on_error="'+dropdown_on_error+'"\n';
		if (text_delay!='')
			code += '	delay="'+text_delay+'"\n';
                code += '/>\n';
                code += next.join('\n\n');
                code += error.join('\n\n');
  return code;
};

// https://blockly-demo.appspot.com/static/demos/blockfactory/index.html#h3pm3t
Blockly.Blocks['job_chain_error'] = {
  init: function() {
    this.appendDummyInput()
        .appendField("{{ "State" | trans }}")
        .appendField(new Blockly.FieldTextInput("state"), "STATE");
    this.appendDummyInput()
        .setAlign(Blockly.ALIGN_RIGHT)
        .appendField("{{ "Job" | trans }}")
        .appendField(new Blockly.FieldVariable("job"), "JOB");
    this.appendStatementInput("NEXT_STATE")
	    .setAlign(Blockly.ALIGN_RIGHT)
	    .appendField("{{ "Next state" | trans }}")
        .setCheck(null);
    this.appendStatementInput("ERROR_STATE")
	    .setAlign(Blockly.ALIGN_RIGHT)
	    .appendField("{{ "Error state" | trans }}")
        .setCheck(null);
    this.appendDummyInput()
        .setAlign(Blockly.ALIGN_RIGHT)
        .appendField("on_error")
        .appendField(new Blockly.FieldDropdown([["", ""], ["suspend", "suspend"],["setback", "setback"]]), "ON_ERROR");
	this.appendDummyInput()
        .setAlign(Blockly.ALIGN_RIGHT)
        .appendField("delay")
        .appendField(new Blockly.FieldTextInput(""), "DELAY");
	this.setPreviousStatement(true, null);
    this.setInputsInline(true);        
    this.setNextStatement(false, null);
    this.setColour("#ff6666");
    this.setTooltip('');
    this.setHelpUrl('http://www.sos-berlin.com/doc/en/scheduler.doc/xml/job_chain.xml#element_job_chain_node');
  }
};

Blockly.JobScheduler['job_chain_error'] = function(block) {
  var name = block.getFieldValue('STATE');
  var text_delay = block.getFieldValue('DELAY');
  var variable_job = Blockly.JobScheduler.variableDB_.getName(block.getFieldValue('JOB'), Blockly.Variables.NAME_TYPE);
  var statements_next_state = Blockly.JobScheduler.statementToCode(block, 'NEXT_STATE');
  var statements_error_state = Blockly.JobScheduler.statementToCode(block, 'ERROR_STATE');
  var dropdown_on_error = block.getFieldValue('ON_ERROR');
  var next = statements_next_state.split(' -->\n');
  var name_next_state = next.shift().trim().substr(10);
  var error = statements_error_state.split(' -->\n');
  var name_error_state = error.shift().trim().substr(10);
  var code = '<!-- STEP '+name+' -->\n'
        code += '<job_chain_node\n';
		code += '	state="'+name+'"\n';
		code += '	job="'+variable_job+'"\n';
		code += '	next_state="'+name_next_state+'"\n';
		code += '	error_state="'+name_error_state+'"\n';
		if (dropdown_on_error!='')
			code += '	on_error="'+dropdown_on_error+'"\n';
		if (text_delay!='')
			code += '	delay="'+text_delay+'\n';
                code += '/>\n';
                code += next.join('\n\n');
                code += error.join('\n\n');
  return code;
};

Blockly.Blocks['job_chain_goto'] = {
  init: function() {
    this.appendDummyInput()
        .appendField("{{ "Go to" | trans }}")
        .appendField(new Blockly.FieldTextInput("state"), "STATE");
    this.setInputsInline(true);        
    this.setPreviousStatement(true, null);
    this.setNextStatement(false, null);
    this.setColour({{ color_nodes }});
    this.setTooltip('');
    this.setHelpUrl('http://www.sos-berlin.com/doc/en/scheduler.doc/xml/job_chain.xml#element_job_chain_node');
  }
};

Blockly.JobScheduler['job_chain_goto'] = function(block) {
  var name = block.getFieldValue('STATE');
  var code = '<!-- STEP '+name+' -->\n'
  return code;
};

Blockly.Blocks['end_node'] = {
  init: function() {
    this.appendDummyInput()
        .appendField("{{ "End node" | trans }}")
        .appendField(new Blockly.FieldTextInput("state"), "STATE");
    this.setInputsInline(true);
    this.setPreviousStatement(true, null);
    this.setNextStatement(false, null);
    this.setColour({{ color_nodes }});
    this.setTooltip('');
    this.setHelpUrl('http://www.sos-berlin.com/doc/en/scheduler.doc/xml/job_chain.xml#element_job_chain_node');
  }
};

Blockly.JobScheduler['end_node'] = function(block) {
  var name = block.getFieldValue('STATE');
  var code = '<!-- STEP '+name+' -->\n'
    code += '<job_chain_node\n';
    code += '	state="'+name+'"/>\n';
  return code;
};

Blockly.Blocks['sink_node'] = {
  init: function() {
    this.appendDummyInput()
        .appendField("{{ "File sink" | trans }}")
        .appendField(new Blockly.FieldTextInput("state"), "STATE");
    this.appendDummyInput()
        .setAlign(Blockly.ALIGN_RIGHT)
        .appendField("{{ "Move to" | trans }}")
        .appendField(new Blockly.FieldTextInput(""), "MOVE_TO");
    this.appendDummyInput()
        .setAlign(Blockly.ALIGN_RIGHT)
        .appendField("{{ "Remove" | trans }}")
        .appendField(new Blockly.FieldCheckbox("TRUE"), "REMOVE");
    this.setInputsInline(true);
    this.setPreviousStatement(true, null);
    this.setNextStatement(false, null);
    this.setColour({{ color_nodes }});
    this.setTooltip('');
    this.setHelpUrl('http://www.sos-berlin.com/doc/en/scheduler.doc/xml/job_chain.xml#element_job_chain_node');
  }
};

Blockly.JobScheduler['sink_node'] = function(block) {
  var name = block.getFieldValue('STATE');
  var text_move_to = block.getFieldValue('MOVE_TO');
  var checkbox_remove = block.getFieldValue('REMOVE') == 'TRUE';
  var code = '<file_order_sink\n';
		code += '	state="'+name+'"\n';
		if (text_move_to!='')
			code += '	move_to="'+text_move_to+'"\n';
		if (checkbox_remove=='TRUE')
			code += '	remove="yes"/>\n';
  return code;
};

// https://blockly-demo.appspot.com/static/demos/blockfactory/index.html#i9ix5r
Blockly.Blocks['order'] = {
  init: function() {
    this.appendDummyInput()
        .appendField("order");
    this.appendDummyInput()
        .setAlign(Blockly.ALIGN_RIGHT)
        .appendField("title")
        .appendField(new Blockly.FieldTextInput(""), "TITLE");
    this.appendDummyInput()
        .setAlign(Blockly.ALIGN_RIGHT)
        .appendField("priority")
        .appendField(new Blockly.FieldTextInput(""), "PRIORITY");
    this.appendStatementInput("PARAMS")
        .setCheck(null)
        .setAlign(Blockly.ALIGN_RIGHT)
        .appendField("params");
    this.appendStatementInput("RUN_TIME")
        .setCheck(null)
        .setAlign(Blockly.ALIGN_RIGHT)
        .appendField("run_time");
	this.setPreviousStatement(true, null);
    this.setNextStatement(true, null);
    this.setColour({{ color_triggers }});
    this.setTooltip('');
    this.setHelpUrl('http://www.example.com/');
  }
};

Blockly.JobScheduler['order'] = function(block) {
  var text_title = block.getFieldValue('TITLE');
  var text_priority = block.getFieldValue('PRIORITY');
  var statements_params = Blockly.JobScheduler.statementToCode(block, 'PARAMS');
  var statements_run_time = Blockly.JobScheduler.statementToCode(block, 'RUN_TIME');
  // TODO: Assemble JavaScript into code variable.
  var code = '...;\n';
  return code;
};

Blockly.Blocks['file_order_source'] = {
  init: function() {
    this.appendDummyInput()
        .appendField("file order source");
    this.appendDummyInput()
        .setAlign(Blockly.ALIGN_RIGHT)
        .appendField("directory")
        .appendField(new Blockly.FieldTextInput(""), "DIRECTORY");
    this.appendDummyInput()
        .setAlign(Blockly.ALIGN_RIGHT)
        .appendField("regex")
        .appendField(new Blockly.FieldTextInput("\\.txt$"), "REGEX");
    this.appendDummyInput()
        .setAlign(Blockly.ALIGN_RIGHT)
        .appendField("repeat")
        .appendField(new Blockly.FieldTextInput("30"), "REPEAT");
    this.appendDummyInput()
        .setAlign(Blockly.ALIGN_RIGHT)
        .appendField("delay_after_error")
        .appendField(new Blockly.FieldTextInput(""), "DELAY_AFTER_ERROR");
    this.appendDummyInput()
        .setAlign(Blockly.ALIGN_RIGHT)
        .appendField("max")
        .appendField(new Blockly.FieldTextInput(""), "MAX");
	this.setPreviousStatement(true, null);
    this.setNextStatement(true, null);
    this.setColour({{ color_triggers }});
    this.setTooltip('{{ color_triggers }}');
    this.setHelpUrl('http://www.sos-berlin.com/doc/en/scheduler.doc/xml/file_order_source.xml');
  }
};

Blockly.JobScheduler['file_order_source'] = function(block) {
  var text_directory = block.getFieldValue('DIRECTORY');
  var text_regex = block.getFieldValue('REGEX');
  var text_repeat = block.getFieldValue('REPEAT');
  var text_delay_after_error = block.getFieldValue('DELAY_AFTER_ERROR');
  var text_max = block.getFieldValue('MAX');
  // TODO: Assemble JavaScript into code variable.
  var code = '...;\n';
  return code;
};
/* 
===========================================================================
	NESTED CHAINS (160)
=========================================================================== 
*/
// https://blockly-demo.appspot.com/static/demos/blockfactory/index.html#g6bsxw
Blockly.Blocks['nested_chain'] = {
  init: function() {
	this.appendDummyInput()
        .appendField("job_chain")
        .appendField(new Blockly.FieldTextInput("job_chain"), "name");
    this.appendDummyInput()
        .setAlign(Blockly.ALIGN_RIGHT)
        .appendField("title")
        .appendField(new Blockly.FieldTextInput(""), "TITLE");
    this.appendDummyInput()
        .setAlign(Blockly.ALIGN_RIGHT)
        .appendField("process_class")
        .appendField(new Blockly.FieldVariable("localhost"), "PROCESS_CLASS");
    this.appendStatementInput("orders")
        .setCheck(null)
        .setAlign(Blockly.ALIGN_RIGHT)
        .appendField("orders");
    this.appendStatementInput("files_order_source")
        .setCheck(null)
        .setAlign(Blockly.ALIGN_RIGHT)
        .appendField("files_order_source");
    this.appendStatementInput("CHAIN_NODES")
        .setCheck(null)
        .setAlign(Blockly.ALIGN_RIGHT)
        .appendField("chain_nodes");
    this.appendStatementInput("NAME")
        .setCheck(null)
        .setAlign(Blockly.ALIGN_RIGHT)
        .appendField("job_chain_nodes");
    this.appendDummyInput()
        .setAlign(Blockly.ALIGN_RIGHT)
        .appendField("max_orders")
        .appendField(new Blockly.FieldTextInput(""), "MAX_ORDERS");
    this.appendDummyInput()
        .setAlign(Blockly.ALIGN_RIGHT)
        .appendField("orders_recoverable")
        .appendField(new Blockly.FieldCheckbox("TRUE"), "ORDERS_RECOVERABLE");
    this.appendDummyInput()
        .setAlign(Blockly.ALIGN_RIGHT)
        .appendField("distributed")
        .appendField(new Blockly.FieldCheckbox("FALSE"), "DISTRIBUTED");
    this.setColour({{ color_nested }});		
    this.setTooltip('');
    this.setHelpUrl('http://www.sos-berlin.com/doc/en/scheduler.doc/xml/job_chain.xml');
  }
};

Blockly.JobScheduler['nested_chain'] = function(block) {
  var text_name = block.getFieldValue('name');
  var text_title = block.getFieldValue('title');
  var text_max_orders = block.getFieldValue('max_orders');
  var variable_process_class = Blockly.JobScheduler.variableDB_.getName(block.getFieldValue('PROCESS_CLASS'), Blockly.Variables.NAME_TYPE)
  var statements_file_order_source = Blockly.JobScheduler.statementToCode(block, 'file_order_source');
  var statements_chain_nodes = Blockly.JobScheduler.statementToCode(block, 'NODES');
  var statements_name = Blockly.JobScheduler.statementToCode(block, 'NAME');
  var checkbox_distributed = block.getFieldValue('DISTRIBUTED') == 'TRUE';
  var checkbox_orders_recoverable = block.getFieldValue('ORDERS_RECOVERABLE') == 'TRUE';
  var code = '<job_chain\n';
	code += '	name="'+text_name+'"\n';
	if (variable_process_class!='localhost') 
		code += '	process_class="'+variable_process_class+'"\n';
	code += '	max_orders="'+max_orders+'"\n';
	code += '	distributed="'+checkbox_distributed+'"\n';
	code += '	orders_recoverable="'+checkbox_orders_recoverable+'"\n';
	code += '>\n';
	code += statements_file_order_source;
	code += statements_chain_nodes;
	code += statements_file_order_sink;
	code += '</job_chain>\n';
  return code;
};

// https://blockly-demo.appspot.com/static/demos/blockfactory/index.html#h3pm3t
Blockly.Blocks['job_chain_node_job_chain'] = {
  init: function() {
    this.appendDummyInput()
        .appendField("job chain node");
    this.appendDummyInput()
        .appendField("state")
        .appendField(new Blockly.FieldVariable("state"), "STATE");
    this.appendDummyInput()
		.setAlign(Blockly.ALIGN_RIGHT)
        .appendField("job_chain")
        .appendField(new Blockly.FieldVariable("job_chain"), "JOB_CHAIN");
    this.appendDummyInput()
        .setAlign(Blockly.ALIGN_RIGHT)
        .appendField("next_state")
        .appendField(new Blockly.FieldVariable("state_next"), "NEXT_STATE");
    this.appendDummyInput()
        .setAlign(Blockly.ALIGN_RIGHT)
        .appendField("on_error")
        .appendField(new Blockly.FieldDropdown([["", ""], ["suspend", "suspend"],["setback", "setback"]]), "ON_ERROR");
	this.appendDummyInput()
        .setAlign(Blockly.ALIGN_RIGHT)
        .appendField("error_state")
        .appendField(new Blockly.FieldVariable("state_error"), "ERROR_STATE");
/*    this.appendStatementInput("ON_RETURN_CODES")
	    .setAlign(Blockly.ALIGN_RIGHT)
	    .appendField("on_return_codes")
        .setCheck(null);
*/	this.appendDummyInput()
        .setAlign(Blockly.ALIGN_RIGHT)
        .appendField("delay")
        .appendField(new Blockly.FieldTextInput(""), "DELAY");
	this.setPreviousStatement(true, null);
    this.setNextStatement(true, null);
    this.setColour({{ color_nested }});
    this.setTooltip('');
    this.setHelpUrl('http://www.sos-berlin.com/doc/en/scheduler.doc/xml/job_chain.xml#element_job_chain_node');
  }
};

Blockly.JobScheduler['job_chain_node_job_chain'] = function(block) {
  var variable_state = Blockly.JobScheduler.variableDB_.getName(block.getFieldValue('STATE'), Blockly.Variables.NAME_TYPE);
  var variable_job = Blockly.JobScheduler.variableDB_.getName(block.getFieldValue('JOB_CHAIN'), Blockly.Variables.NAME_TYPE);
  var variable_next_state = Blockly.JobScheduler.variableDB_.getName(block.getFieldValue('NEXT_STATE'), Blockly.Variables.NAME_TYPE);
  var variable_error_state = Blockly.JobScheduler.variableDB_.getName(block.getFieldValue('ERROR_STATE'), Blockly.Variables.NAME_TYPE);
  var code = '<job_chain_node.job_chain\n';
		code += '	state="'+variable_state+'"\n';
		code += '	job_chain="'+variable_job_chain+'"\n';
		code += '	next_state="'+variable_next_state+'"\n';
		code += '	error_state="'+variable_error_state+'"\n';
		code += '/>\n';
  return code;
};

/* 
===========================================================================
	PARAMS (160)
=========================================================================== 
*/

Blockly.Blocks['script_param'] = {
  init: function() {
    this.appendValueInput("PARAM")
        .appendField("")
		.appendField(new Blockly.FieldVariable("param"), "NAME");
    this.setOutput(true, null);
    this.setColour({{ color_params }});
    this.setTooltip('');
    this.setHelpUrl('');
  }
};

Blockly.JobScheduler['script_param'] = function(block) {
  var variable_param = Blockly.JobScheduler.variableDB_.getName(block.getFieldValue('NAME'), Blockly.Variables.NAME_TYPE);
  var value_param = Blockly.JobScheduler.valueToCode(block, 'PARAM', Blockly.JobScheduler.ORDER_NODE);
  var code = '%%'+variable_param;
        code += '\n'+value_param;
  return [code, Blockly.JobScheduler.ORDER_NONE];
};

// https://blockly-demo.appspot.com/static/demos/blockfactory/index.html#e29vka
Blockly.Blocks['params'] = {
  init: function() {
    this.appendDummyInput()
        .appendField("params");
    this.appendStatementInput("PARAM")
        .setCheck(null)
        .setAlign(Blockly.ALIGN_RIGHT)
        .appendField("param");
    this.appendDummyInput()
        .setAlign(Blockly.ALIGN_RIGHT)
        .appendField("copy_params")
        .appendField(new Blockly.FieldDropdown([["", "NO"], ["task", "TASK"], ["order", "ORDER"]]), "NAME");
    this.appendValueInput("INCLUDE")
        .setCheck(null)
        .setAlign(Blockly.ALIGN_RIGHT)
        .appendField("include");
    this.setPreviousStatement(true, null);
    this.setNextStatement(true, null);
    this.setColour({{ color_params }});
    this.setTooltip('');
    this.setHelpUrl('http://www.sos-berlin.com/doc/en/scheduler.doc/xml/params.xml');
  }
};

Blockly.JobScheduler['params'] = function(block) {
  var statements_param = Blockly.JobScheduler.statementToCode(block, 'PARAM');
  var dropdown_name = block.getFieldValue('NAME');
  var value_include = Blockly.JobScheduler.valueToCode(block, 'INCLUDE', Blockly.JobScheduler.ORDER_ATOMIC);
  // TODO: Assemble JavaScript into code variable.
  var code = '...;\n';
  return code;
};

// https://blockly-demo.appspot.com/static/demos/blockfactory/index.html#savpa7
Blockly.Blocks['param'] = {
  init: function() {
    this.appendDummyInput()
        .appendField("{{ "Parameter" | trans }}")
        .appendField(new Blockly.FieldVariable("param"), "NAME")
        .appendField(new Blockly.FieldTextInput(""), "VALUE");
    this.setPreviousStatement(true, null);
    this.setNextStatement(true, null);
    this.setColour({{ color_params }});
    this.setTooltip('');
    this.setHelpUrl('http://www.example.com/');
  }
};

Blockly.JobScheduler['param'] = function(block) {
  var variable_name = Blockly.JobScheduler.variableDB_.getName(block.getFieldValue('NAME'), Blockly.Variables.NAME_TYPE);
  var text_value = block.getFieldValue('VALUE');
  // TODO: Assemble JavaScript into code variable.
  var code = '<param name="'+variable_name+'"  value="'+text_value+'"/>\n';
  return code;
};


/* 
===========================================================================
	MORE
=========================================================================== 
*/
// https://blockly-demo.appspot.com/static/demos/blockfactory/index.html#p5ixzh
Blockly.Blocks['include'] = {
  init: function() {
    this.appendDummyInput()
        .appendField("{{ "Include" | trans }}")
        .appendField(new Blockly.FieldTextInput("file"), "LIVE_FILE");
    this.setOutput(true, null);
    this.setColour({{ color_misc }});
    this.setTooltip('');
    this.setHelpUrl('http://www.sos-berlin.com/doc/en/scheduler.doc/xml/include.xml');
  }
};

Blockly.JobScheduler['include'] = function(block) {
  var text_live_file = block.getFieldValue('LIVE_FILE');
  if (text_live_file=='') 
	return [text_live_file, Blockly.JobScheduler.ORDER_NONE];
  var code = '<include live_file="'+text_live_file+'"/>\n';
  return [code, Blockly.JobScheduler.ORDER_NONE];
};

Blockly.Blocks['text'] = {
  init: function() {
    this.appendValueInput("MORE")
		.appendField("")
        .appendField(new Blockly.FieldTextInput("text"), "TEXT");
    this.setOutput(true, null);
    this.setColour({{ color_misc }});
    this.setTooltip('free text');
    this.setHelpUrl('');
  }
};

Blockly.JobScheduler['text'] = function(block) {
  var text = block.getFieldValue('TEXT');
  var value_more = Blockly.JobScheduler.valueToCode(block, 'MORE', Blockly.JobScheduler.ORDER_NONE);
  var code = text;
  if (value_more!='')
		code += '\n'+value_more;
  return [code, Blockly.JobScheduler.ORDER_NONE];
};


// https://blockly-demo.appspot.com/static/demos/blockfactory/index.html#q3j7o3
Blockly.Blocks['start_when_directory_changed'] = {
  init: function() {
    this.appendDummyInput()
        .appendField("start_when_directory_changed");
    this.appendDummyInput()
        .setAlign(Blockly.ALIGN_RIGHT)
        .appendField("directory")
        .appendField(new Blockly.FieldTextInput(""), "DIRECTORY");
    this.appendDummyInput()
        .setAlign(Blockly.ALIGN_RIGHT)
        .appendField("regex")
        .appendField(new Blockly.FieldTextInput(""), "REGEX");
    this.setPreviousStatement(true, null);
    this.setNextStatement(true, null);
    this.setColour({{ color_misc }});
    this.setTooltip('');
    this.setHelpUrl('http://www.example.com/');
  }
};

Blockly.JobScheduler['start_when_directory_changed'] = function(block) {
  var text_directory = block.getFieldValue('DIRECTORY');
  var text_regex = block.getFieldValue('REGEX');
  // TODO: Assemble JavaScript into code variable.
  var code = '...;\n';
  return code;
};

// https://blockly-demo.appspot.com/static/demos/blockfactory/index.html#x638vv
Blockly.Blocks['delay_order_after_setback'] = {
  init: function() {
    this.appendDummyInput()
        .appendField("delay_order_after_setback");
    this.appendDummyInput()
        .setAlign(Blockly.ALIGN_RIGHT)
        .appendField("delay")
        .appendField(new Blockly.FieldTextInput(""), "DELAY");
    this.appendDummyInput()
        .setAlign(Blockly.ALIGN_RIGHT)
        .appendField("is_maximum")
        .appendField(new Blockly.FieldCheckbox("FALSE"), "IS_MAXIMUM");
    this.appendDummyInput()
        .setAlign(Blockly.ALIGN_RIGHT)
        .appendField("setback_count")
        .appendField(new Blockly.FieldTextInput(""), "SETBACk_COUNT");
    this.setPreviousStatement(true, null);
    this.setNextStatement(true, null);
    this.setColour({{ color_misc }});
    this.setTooltip('');
    this.setHelpUrl('http://www.example.com/');
  }
};

Blockly.JobScheduler['delay_order_after_setback'] = function(block) {
  var text_delay = block.getFieldValue('DELAY');
  var checkbox_is_maximum = block.getFieldValue('IS_MAXIMUM') == 'TRUE';
  var text_setback_count = block.getFieldValue('SETBACk_COUNT');
  // TODO: Assemble JavaScript into code variable.
  var code = '...;\n';
  return code;
};

// https://blockly-demo.appspot.com/static/demos/blockfactory/index.html#myjdsx
Blockly.Blocks['lock_use'] = {
  init: function() {
    this.appendDummyInput()
        .appendField("{{ "Lock use" | trans }}")
        .appendField(new Blockly.FieldVariable("lock"), "LOCK");
    this.appendDummyInput()
        .setAlign(Blockly.ALIGN_RIGHT)
        .appendField("{{ "Exclusive" | trans }}")
        .appendField(new Blockly.FieldCheckbox("TRUE"), "EXCLUSIVE");
    this.setInputsInline(false);
    this.setPreviousStatement(true, null);
    this.setNextStatement(true, null);
    this.setColour({{ color_lock }});
    this.setTooltip('');
    this.setHelpUrl('http://www.example.com/');
  }
};

Blockly.JobScheduler['lock_use'] = function(block) {
  var variable_lock = Blockly.JobScheduler.variableDB_.getName(block.getFieldValue('LOCK'), Blockly.Variables.NAME_TYPE);
  var checkbox_exclusive = block.getFieldValue('EXCLUSIVE') == 'TRUE';
  var code = '<lock.use lock="'+variable_lock+'" exclusive="'+(checkbox_exclusive?'yes':'no')+'"/>\n';
  return code;
};

// https://blockly-demo.appspot.com/static/demos/blockfactory/index.html#d8oagg
Blockly.Blocks['lock'] = {
  init: function() {
    this.appendDummyInput()
        .appendField("{{ "Lock" | trans }}")
        .appendField(new Blockly.FieldVariable("lock"), "NAME");
    this.appendDummyInput()
        .setAlign(Blockly.ALIGN_RIGHT)
        .appendField("{{ "Max non exclusive" | trans }}")
        .appendField(new Blockly.FieldTextInput("3"), "MAX_NON_EXCLUSIVE");
    this.setInputsInline(false);
    this.setPreviousStatement(false, null);
    this.setNextStatement(false, null);
    this.setColour({{ color_lock }});
    this.setTooltip('');
    this.setHelpUrl('http://www.sos-berlin.com/doc/en/scheduler.doc/xml/lock.xml');
  }
};

Blockly.JobScheduler['lock'] = function(block) {
  var variable_name = Blockly.JobScheduler.variableDB_.getName(block.getFieldValue('NAME'), Blockly.Variables.NAME_TYPE);
  var text_max_non_exclusive = block.getFieldValue('MAX_NON_EXCLUSIVE');
  var code = FileStart(variable_name,'lock');
        code += '<lock name="'+variable_name+'" max_non_exclusive="'+text_max_non_exclusive+'"/>\n';
        code += FileEnd(variable_name,'lock');
  return code;
};

/* 
===========================================================================
	SCHEDULE
=========================================================================== 
*/

Blockly.Blocks['schedule'] = {
  init: function() {
    this.appendDummyInput()
        .appendField("{{ "Schedule" | trans }}")
        .appendField(new Blockly.FieldVariable("schedule"), "NAME");
    this.appendDummyInput()
        .setAlign(Blockly.ALIGN_RIGHT)
        .appendField("{{ "Substitute" | trans }}")
        .appendField(new Blockly.FieldVariable(" "), "SUBSTITUTE");
    this.appendDummyInput()
        .setAlign(Blockly.ALIGN_RIGHT)
        .appendField("{{ "Valid from" | trans }}")
        .appendField(new Blockly.FieldTextInput(""), "VALID_FROM");
    this.appendDummyInput()
        .setAlign(Blockly.ALIGN_RIGHT)
        .appendField("{{ "Valid to" | trans }}")
        .appendField(new Blockly.FieldTextInput(""), "VALID_TO");
    this.appendStatementInput("AT")
        .setCheck(null)
        .setAlign(Blockly.ALIGN_RIGHT)
        .appendField("{{ "At" | trans }}");
    this.appendStatementInput("DATE")
        .setCheck(null)
        .setAlign(Blockly.ALIGN_RIGHT)
        .appendField("{{ "Date" | trans }}");
    this.appendStatementInput("MONTH")
        .setCheck(null)
        .setAlign(Blockly.ALIGN_RIGHT)
        .appendField("{{ "Months" | trans }}");
    this.appendStatementInput("WEEKDAYS")
        .setCheck(null)
        .setAlign(Blockly.ALIGN_RIGHT)
        .appendField("{{ "Week days" | trans }}");
    this.appendStatementInput("MONTHDAYS")
        .setCheck(null)
        .setAlign(Blockly.ALIGN_RIGHT)
        .appendField("{{ "Month days" | trans }}");
    this.appendStatementInput("ULTIMOS")
        .setCheck(null)
        .setAlign(Blockly.ALIGN_RIGHT)
        .appendField("{{ "Ultimos" | trans }}");
    this.appendStatementInput("HOLIDAYS")
        .setCheck(null)
        .setAlign(Blockly.ALIGN_RIGHT)
        .appendField("{{ "Holidays" | trans }}");
    this.setInputsInline(false);
    this.setColour({{ color_schedule }});
    this.setTooltip('');
    this.setHelpUrl('http://www.sos-berlin.com/doc/en/scheduler.doc/xml/schedule.xml');
  }
};

Blockly.JobScheduler['schedule'] = function(block) {
  var variable_name = Blockly.JobScheduler.variableDB_.getName(block.getFieldValue('NAME'), Blockly.Variables.NAME_TYPE);
  var text_begin = block.getFieldValue('VALID_FROM');
  var text_end = block.getFieldValue('VALID_TO');
  var statements_at = Blockly.JobScheduler.statementToCode(block, 'AT');
  var statements_date = Blockly.JobScheduler.statementToCode(block, 'DATE');
  var statements_weekdays = Blockly.JobScheduler.statementToCode(block, 'WEEKDAYS');
  var statements_monthdays = Blockly.JobScheduler.statementToCode(block, 'MONTHDAYS');
  var statements_month = Blockly.JobScheduler.statementToCode(block, 'MONTH');
  var statements_ultimos = Blockly.JobScheduler.statementToCode(block, 'ULTIMOS');
  var statements_holidays = Blockly.JobScheduler.statementToCode(block, 'HOLIDAYS');  
  var code = FileStart(variable_name,'schedule');
        code += '<schedule name="'+variable_name+'"\n';
	if (text_begin != '')
		code += '	valid_from="'+text_begin+'"\n';
	if (text_end != '')
		code += '	valid_to="'+text_end+'"\n';
	code += '>\n';
	code += statements_at;
	code += statements_date;
	code += statements_weekdays;
	code += statements_monthdays;
	code += statements_month;
	code += statements_ultimos;
	code += statements_holidays;
	code += '</schedule>\n';
        code += FileEnd(variable_name,'schedule');
  return code;
};

// https://blockly-demo.appspot.com/static/demos/blockfactory/index.html#y6u962
Blockly.Blocks['run_time.single'] = {
  init: function() {
    this.appendDummyInput()
        .appendField("{{ "Run time" | trans }} ({{ "Simple" | trans }})");
    this.appendDummyInput()
        .setAlign(Blockly.ALIGN_RIGHT)
        .appendField("{{ "Start time" | trans }}")
        .appendField(new Blockly.FieldTextInput("00:00:00"), "SINGLE_START");
    this.appendDummyInput()
        .setAlign(Blockly.ALIGN_RIGHT)
        .appendField("{{ "Timezone" | trans }}")
        .appendField(new Blockly.FieldTextInput(""), "TIME_ZONE");
    this.appendStatementInput("HOLIDAYS")
        .setCheck(null)
        .setAlign(Blockly.ALIGN_RIGHT)
        .appendField("{{ "Holidays" | trans }}");
    this.appendDummyInput()
        .setAlign(Blockly.ALIGN_RIGHT)
        .appendField("{{ "When holiday" | trans }}")
        .appendField(new Blockly.FieldDropdown([["{{ "Suppress job" | trans }}", "suppress"], ["{{ "Ignore holiday" | trans }}", "ignore_holiday"], ["{{ "Previous non holiday" | trans }}", "previous_non_holiday"], ["{{ "Next non holiday" | trans }}", "next_non_holiday"]]), "WHEN_HOLIDAY");
    this.appendDummyInput()
        .setAlign(Blockly.ALIGN_RIGHT)
        .appendField("{{ "Let run" | trans }}")
        .appendField(new Blockly.FieldCheckbox("TRUE"), "LET_RUN");
    this.setInputsInline(false);
    this.setPreviousStatement(true, null);
    this.setNextStatement(true, null);
    this.setColour({{ color_schedule }});
    this.setTooltip('');
    this.setHelpUrl('http://www.sos-berlin.com/doc/en/scheduler.doc/xml/run_time.xml');
  }
};

Blockly.JobScheduler['run_time.single'] = function(block) {
  var checkbox_let_run = block.getFieldValue('LET_RUN') == 'TRUE';
  var text_single_start = block.getFieldValue('SINGLE_START');
  var text_time_zone = block.getFieldValue('TIME_ZONE');
  var dropdown_when_holiday = block.getFieldValue('WHEN_HOLIDAY');
  var statements_holidays = Blockly.JobScheduler.statementToCode(block, 'HOLIDAYS');  
  var code = '<run_time\n';
	code += '	let_run="'+(checkbox_let_run?'yes':'no')+'"\n';
        code += '	single_start="'+text_single_start+'"\n';
	code += '	time_zone="'+text_time_zone+'"\n';
	code += '	when_holiday="'+dropdown_when_holiday+'">\n';
        code += statements_holidays;
	code += '</run_time>\n';
  return code;
};

Blockly.Blocks['run_time.days'] = {
  init: function() {
    this.appendDummyInput()
        .appendField("{{ "Run time" | trans }} ({{ "Days" | trans }})");
    this.appendStatementInput("DAYS")
        .setCheck(null)
        .setAlign(Blockly.ALIGN_RIGHT)
        .appendField("{{ "Days" | trans }}");
    this.setInputsInline(false);
    this.setPreviousStatement(true, null);
    this.setNextStatement(true, null);
    this.setColour({{ color_schedule }});
    this.setTooltip('');
    this.setHelpUrl('http://www.sos-berlin.com/doc/en/scheduler.doc/xml/run_time.xml');
  }
};

Blockly.JobScheduler['run_time.days'] = function(block) {
    var checkbox_let_run = block.getFieldValue('LET_RUN') == 'TRUE';
    var statements_days = Blockly.JobScheduler.statementToCode(block, 'DAYS');  
    var code = '<run_time\n';
	code += '	let_run="'+(checkbox_let_run?'yes':'no')+'"\n';
	code += '>\n';
        code += statements_days;
        code += '</run_time>\n';
  return code;
};

// https://blockly-demo.appspot.com/static/demos/blockfactory/index.html#y6u962
Blockly.Blocks['run_time.repeat'] = {
  init: function() {
    this.appendDummyInput()
        .appendField("{{ "Run time" | trans }} ({{ "Cyclic" | trans }})");
    this.appendDummyInput()
        .setAlign(Blockly.ALIGN_RIGHT)
        .appendField("{{ "Repeat" | trans }}")
        .appendField(new Blockly.FieldTextInput("00:00:00"), "REPEAT");
    this.appendDummyInput()
        .setAlign(Blockly.ALIGN_RIGHT)
        .appendField("{{ "Begin" | trans }}")
        .appendField(new Blockly.FieldTextInput("00:00:00"), "BEGIN");
    this.appendDummyInput()
        .setAlign(Blockly.ALIGN_RIGHT)
        .appendField("{{ "End" | trans }}")
        .appendField(new Blockly.FieldTextInput("23:59:59"), "END");
    this.appendDummyInput()
        .setAlign(Blockly.ALIGN_RIGHT)
        .appendField("{{ "Timezone" | trans }}")
        .appendField(new Blockly.FieldTextInput(""), "TIME_ZONE");
    this.appendStatementInput("HOLIDAYS")
        .setCheck(null)
        .setAlign(Blockly.ALIGN_RIGHT)
        .appendField("{{ "Holidays" | trans }}");
    this.appendDummyInput()
        .setAlign(Blockly.ALIGN_RIGHT)
        .appendField("{{ "When holiday" | trans }}")
        .appendField(new Blockly.FieldDropdown([["{{ "Suppress job" | trans }}", "suppress"], ["Ignore holiday", "ignore_holiday"], ["Previous non holiday", "previous_non_holiday"], ["Next non holiday", "next_non_holiday"]]), "WHEN_HOLIDAY");
    this.appendDummyInput()
        .setAlign(Blockly.ALIGN_RIGHT)
        .appendField("{{ "Let run" | trans }}")
        .appendField(new Blockly.FieldCheckbox("TRUE"), "LET_RUN");
    this.setInputsInline(false);
    this.setPreviousStatement(true, null);
    this.setNextStatement(true, null);
    this.setColour({{ color_schedule }});
    this.setTooltip('');
    this.setHelpUrl('http://www.sos-berlin.com/doc/en/scheduler.doc/xml/run_time.xml');
  }
};

Blockly.JobScheduler['run_time.repeat'] = function(block) {
  var text_begin = block.getFieldValue('BEGIN');
  var text_end = block.getFieldValue('END');
  var checkbox_let_run = block.getFieldValue('LET_RUN') == 'TRUE';
  var text_repeat = block.getFieldValue('REPEAT');
  var text_time_zone = block.getFieldValue('TIME_ZONE');
  var dropdown_when_holiday = block.getFieldValue('WHEN_HOLIDAY');
  var code = '<run_time\n';
        code += '	begin="'+text_begin+'"\n';
        code += '	end="'+text_end+'"\n';
	code += '	let_run="'+(checkbox_let_run?'yes':'no')+'"\n';
	code += '	repeat="'+text_repeat+'"\n';
	code += '	time_zone="'+text_time_zone+'"\n';
	code += '	when_holiday="'+dropdown_when_holiday+'"\n';
	code += '/>\n';
  return code;
};

// https://blockly-demo.appspot.com/static/demos/blockfactory/index.html#y6u962
Blockly.Blocks['run_time.free'] = {
  init: function() {
    this.appendDummyInput()
        .appendField("{{ "Run Time" | trans }}");
    this.appendDummyInput()
        .setAlign(Blockly.ALIGN_RIGHT)
        .appendField("time_zone")
        .appendField(new Blockly.FieldTextInput(""), "TIME_ZONE");
    this.appendStatementInput("PERIOD")
        .setCheck(null)
        .setAlign(Blockly.ALIGN_RIGHT)
        .appendField("period");
    this.appendStatementInput("AT")
        .setCheck(null)
        .setAlign(Blockly.ALIGN_RIGHT)
        .appendField("at");
    this.appendStatementInput("DATE")
        .setCheck(null)
        .setAlign(Blockly.ALIGN_RIGHT)
        .appendField("date");
    this.appendStatementInput("WEEKDAYS")
        .setCheck(null)
        .setAlign(Blockly.ALIGN_RIGHT)
        .appendField("weekdays");
    this.appendStatementInput("MONTHDAYS")
        .setCheck(null)
        .setAlign(Blockly.ALIGN_RIGHT)
        .appendField("monthdays");
    this.appendStatementInput("MONTH")
        .setCheck(null)
        .setAlign(Blockly.ALIGN_RIGHT)
        .appendField("month");
    this.appendStatementInput("ULTIMOS")
        .setCheck(null)
        .setAlign(Blockly.ALIGN_RIGHT)
        .appendField("ultimos");
    this.appendStatementInput("HOLIDAYS")
        .setCheck(null)
        .setAlign(Blockly.ALIGN_RIGHT)
        .appendField("holidays");
    this.appendDummyInput()
        .setAlign(Blockly.ALIGN_RIGHT)
        .appendField("when_holiday")
        .appendField(new Blockly.FieldDropdown([["suppress", "suppress"], ["ignore_holiday", "ignore_holiday"], ["previous_non_holiday", "previous_non_holiday"], ["next_non_holiday", "next_non_holiday"]]), "WHEN_HOLIDAY");
    this.setInputsInline(false);
    this.setPreviousStatement(true, null);
    this.setNextStatement(true, null);
    this.setColour({{ color_schedule }});
    this.setTooltip('');
    this.setHelpUrl('http://www.sos-berlin.com/doc/en/scheduler.doc/xml/run_time.xml');
  }
};

Blockly.JobScheduler['run_time.free'] = function(block) {
  var text_time_zone = block.getFieldValue('TIME_ZONE');
  var dropdown_when_holiday = block.getFieldValue('WHEN_HOLIDAY');
  var statements_period = Blockly.JobScheduler.statementToCode(block, 'PERIOD');
  var statements_at = Blockly.JobScheduler.statementToCode(block, 'AT');
  var statements_date = Blockly.JobScheduler.statementToCode(block, 'DATE');
  var statements_weekdays = Blockly.JobScheduler.statementToCode(block, 'WEEKDAYS');
  var statements_monthdays = Blockly.JobScheduler.statementToCode(block, 'MONTHDAYS');
  var statements_month = Blockly.JobScheduler.statementToCode(block, 'MONTH');
  var statements_ultimos = Blockly.JobScheduler.statementToCode(block, 'ULTIMOS');
  var statements_holidays = Blockly.JobScheduler.statementToCode(block, 'HOLIDAYS');
  var code = '<run_time\n';
	code += '	time_zone="'+text_time_zone+'"\n';
	code += '	when_holiday="'+dropdown_when_holiday+'"\n';
	code += '>\n';
	code += statements_period;
	code += statements_at;
	code += statements_date;
	code += statements_weekdays;
	code += statements_monthdays;
	code += statements_month;
	code += statements_ultimos;
	code += statements_holidays;
	code += '</run_time>';
  return code;
};

// https://blockly-demo.appspot.com/static/demos/blockfactory/index.html#y6u962
Blockly.Blocks['run_time'] = {
  init: function() {
    this.appendDummyInput()
        .appendField("run_time");
    this.appendDummyInput()
        .setAlign(Blockly.ALIGN_RIGHT)
        .appendField("single_start")
        .appendField(new Blockly.FieldTextInput(""), "SINGLE_START");
    this.appendDummyInput()
        .setAlign(Blockly.ALIGN_RIGHT)
        .appendField("begin")
        .appendField(new Blockly.FieldTextInput(""), "BEGIN");
    this.appendDummyInput()
        .setAlign(Blockly.ALIGN_RIGHT)
        .appendField("end")
        .appendField(new Blockly.FieldTextInput(""), "END");
    this.appendDummyInput()
        .setAlign(Blockly.ALIGN_RIGHT)
        .appendField("let_run")
        .appendField(new Blockly.FieldCheckbox("TRUE"), "LET_RUN");
    this.appendDummyInput()
        .setAlign(Blockly.ALIGN_RIGHT)
        .appendField("repeat")
        .appendField(new Blockly.FieldTextInput(""), "REPEAT");
    this.appendDummyInput()
        .setAlign(Blockly.ALIGN_RIGHT)
        .appendField("time_zone")
        .appendField(new Blockly.FieldTextInput(""), "TIME_ZONE");
    this.appendStatementInput("PERIOD")
        .setCheck(null)
        .setAlign(Blockly.ALIGN_RIGHT)
        .appendField("period");
    this.appendStatementInput("AT")
        .setCheck(null)
        .setAlign(Blockly.ALIGN_RIGHT)
        .appendField("at");
    this.appendStatementInput("DATE")
        .setCheck(null)
        .setAlign(Blockly.ALIGN_RIGHT)
        .appendField("date");
    this.appendStatementInput("WEEKDAYS")
        .setCheck(null)
        .setAlign(Blockly.ALIGN_RIGHT)
        .appendField("weekdays");
    this.appendStatementInput("MONTHDAYS")
        .setCheck(null)
        .setAlign(Blockly.ALIGN_RIGHT)
        .appendField("monthdays");
    this.appendStatementInput("MONTH")
        .setCheck(null)
        .setAlign(Blockly.ALIGN_RIGHT)
        .appendField("month");
    this.appendStatementInput("ULTIMOS")
        .setCheck(null)
        .setAlign(Blockly.ALIGN_RIGHT)
        .appendField("ultimos");
    this.appendStatementInput("HOLIDAYS")
        .setCheck(null)
        .setAlign(Blockly.ALIGN_RIGHT)
        .appendField("holidays");
    this.appendDummyInput()
        .setAlign(Blockly.ALIGN_RIGHT)
        .appendField("when_holiday")
        .appendField(new Blockly.FieldDropdown([["suppress", "suppress"], ["ignore_holiday", "ignore_holiday"], ["previous_non_holiday", "previous_non_holiday"], ["next_non_holiday", "next_non_holiday"]]), "WHEN_HOLIDAY");
    this.setInputsInline(false);
    this.setPreviousStatement(true, null);
    this.setNextStatement(true, null);
    this.setColour({{ color_schedule }});
    this.setTooltip('');
    this.setHelpUrl('http://www.sos-berlin.com/doc/en/scheduler.doc/xml/run_time.xml');
  }
};

Blockly.JobScheduler['run_time'] = function(block) {
  var text_begin = block.getFieldValue('BEGIN');
  var text_end = block.getFieldValue('END');
  var checkbox_let_run = block.getFieldValue('LET_RUN') == 'TRUE';
  var text_repeat = block.getFieldValue('REPEAT');
  var text_single_start = block.getFieldValue('SINGLE_START');
  var text_time_zone = block.getFieldValue('TIME_ZONE');
  var dropdown_when_holiday = block.getFieldValue('WHEN_HOLIDAY');
  var statements_period = Blockly.JobScheduler.statementToCode(block, 'PERIOD');
  var statements_at = Blockly.JobScheduler.statementToCode(block, 'AT');
  var statements_date = Blockly.JobScheduler.statementToCode(block, 'DATE');
  var statements_weekdays = Blockly.JobScheduler.statementToCode(block, 'WEEKDAYS');
  var statements_monthdays = Blockly.JobScheduler.statementToCode(block, 'MONTHDAYS');
  var statements_month = Blockly.JobScheduler.statementToCode(block, 'MONTH');
  var statements_ultimos = Blockly.JobScheduler.statementToCode(block, 'ULTIMOS');
  var statements_holidays = Blockly.JobScheduler.statementToCode(block, 'HOLIDAYS');
  var code = '<run_time\n';
	if (text_begin != '')
		code += '	begin="'+text_begin+'"\n';
	if (text_end != '')
		code += '	end="'+text_end+'"\n';
	code += '	let_run="'+(checkbox_let_run?'yes':'no')+'"\n';
	if (text_repeat != '')
		code += '	repeat="'+text_repeat+'"\n';
	if (text_single_start != '')
		code += '	single_start="'+text_single_start+'"\n';
	code += '	time_zone="'+text_time_zone+'"\n';
	code += '	when_holiday="'+dropdown_when_holiday+'"\n';
	code += '>\n';
	code += statements_period;
	code += statements_at;
	code += statements_date;
	code += statements_weekdays;
	code += statements_monthdays;
	code += statements_month;
	code += statements_ultimos;
	code += statements_holidays;
	code += '</run_time>';
  return code;
};

// https://blockly-demo.appspot.com/static/demos/blockfactory/index.html#y6u962
Blockly.Blocks['run_time.once'] = {
  init: function() {
    this.appendDummyInput()
        .appendField("run_time");
    this.appendDummyInput()
        .setAlign(Blockly.ALIGN_RIGHT)
        .appendField("once")
        .appendField(new Blockly.FieldCheckbox("TRUE"), "ONCE");
    this.setInputsInline(false);
    this.setPreviousStatement(true, null);
    this.setNextStatement(true, null);
    this.setColour({{ color_schedule }});
    this.setTooltip('');
    this.setHelpUrl('http://www.sos-berlin.com/doc/en/scheduler.doc/xml/run_time.xml');
  }
};

Blockly.JobScheduler['run_time.once'] = function(block) {
  var checkbox_once = block.getFieldValue('ONCE') == 'TRUE';
  var code = '<run_time\n';
	code += '	once="'+(checkbox_once?'yes':'no')+'"\n';
	code += '>\n';
	code += '</run_time>';
  return code;
};

Blockly.Blocks['run_time.schedule'] = {
  init: function() {
    this.appendDummyInput()
        .appendField("{{ "Run time" | trans }}");
    this.appendDummyInput()
        .setAlign(Blockly.ALIGN_RIGHT)
        .appendField("{{ "Schedule" | trans }}")
        .appendField(new Blockly.FieldVariable("schedule"), "SCHEDULE");
    this.setInputsInline(false);
    this.setPreviousStatement(true, null);
    this.setNextStatement(true, null);
    this.setColour({{ color_schedule }});
    this.setTooltip('');
    this.setHelpUrl('http://www.sos-berlin.com/doc/en/scheduler.doc/xml/run_time.xml');
  }
};

Blockly.JobScheduler['run_time.schedule'] = function(block) {
  var variable_schedule= Blockly.JobScheduler.variableDB_.getName(block.getFieldValue('SCHEDULE'), Blockly.Variables.NAME_TYPE);
  var code = '<run_time\n';
	if (variable_schedule != ' ')
		code += '	schedule="'+variable_schedule+'"\n';
        code += '>';
        code += '</run_time>';
  return code;
};

// https://blockly-demo.appspot.com/static/demos/blockfactory/index.html#574fz2
Blockly.Blocks['at'] = {
  init: function() {
    this.appendDummyInput()
        .appendField("at")
        .appendField(new Blockly.FieldTextInput(""), "AT");
    this.setInputsInline(false);
    this.setPreviousStatement(true, null);
    this.setNextStatement(true, null);
    this.setColour({{ color_schedule }});
    this.setTooltip('');
    this.setHelpUrl('http://www.sos-berlin.com/doc/en/scheduler.doc/xml/at.xml');
  }
};

Blockly.JobScheduler['at'] = function(block) {
  var text_at = block.getFieldValue('AT');
  // TODO: Assemble JavaScript into code variable.
  var code = '<at at="'+text_at+'" />\n';
  return code;
};

// https://blockly-demo.appspot.com/static/demos/blockfactory/index.html#s2824a
Blockly.Blocks['period.single_start'] = {
  init: function() {
    this.appendDummyInput()
        .appendField("{{ "Period" | trans }} ({{ "Simple" | trans }})");
    this.appendDummyInput()
        .setAlign(Blockly.ALIGN_RIGHT)
        .appendField("{{ "Start time" | trans }}")
        .appendField(new Blockly.FieldTextInput("00:00:00"), "START_TIME");
    this.appendDummyInput()
        .setAlign(Blockly.ALIGN_RIGHT)
        .appendField("{{ "When holiday" | trans }}")
        .appendField(new Blockly.FieldDropdown([["suppress", "suppress"], ["ignore_holiday", "ignore_holiday"], ["previous_non_holiday", "previous_non_holiday"], ["next_non_holiday", "next_non_holiday"]]), "WHEN_HOLIDAY");
    this.appendDummyInput()
        .setAlign(Blockly.ALIGN_RIGHT)
        .appendField("{{ "Let run" | trans }}")
        .appendField(new Blockly.FieldCheckbox("TRUE"), "LET_RUN");
    this.setInputsInline(false);
    this.setPreviousStatement(true, null);
    this.setNextStatement(true, null);
    this.setColour({{ color_schedule }});
    this.setTooltip('');
    this.setHelpUrl('http://www.sos-berlin.com/doc/en/scheduler.doc/xml/period.xml');
  }
};

Blockly.JobScheduler['period.single_start'] = function(block) {
  var text_start_time = block.getFieldValue('START_TIME');
  var checkbox_let_run = block.getFieldValue('LET_RUN') == 'TRUE';
  var dropdown_when_holiday = block.getFieldValue('WHEN_HOLIDAY');
  var code = '<period\n';
            code += '   single_start="'+text_start_time+'"\n';
    if (checkbox_let_run!='')
        code += '   let_run="'+checkbox_let_run+'"\n';
    if (dropdown_when_holiday!='')
        code += '   when_holiday="'+dropdown_when_holiday+'"\n';        
        code += '/>\n';
  return code;
};


// https://blockly-demo.appspot.com/static/demos/blockfactory/index.html#s2824a
Blockly.Blocks['period.repeat'] = {
  init: function() {
    this.appendDummyInput()
        .appendField("{{ "Period" | trans }}");
    this.appendDummyInput()
        .setAlign(Blockly.ALIGN_RIGHT)
        .appendField("{{ "Interval" | trans }}")
        .appendField(new Blockly.FieldDropdown([["End/Start", "REPEAT"], ["Start/Start", "ABSOLUTE_REPEAT"]]), "REPEAT_TYPE");
    this.appendDummyInput()
        .setAlign(Blockly.ALIGN_RIGHT)
        .appendField("{{ "repeat" | trans }}")
        .appendField(new Blockly.FieldTextInput("00:00:00"), "REPEAT");
    this.appendDummyInput()
        .setAlign(Blockly.ALIGN_RIGHT)
        .appendField("{{ "Begin" | trans }}")
        .appendField(new Blockly.FieldTextInput("00:00:00"), "BEGIN");
    this.appendDummyInput()
        .setAlign(Blockly.ALIGN_RIGHT)
        .appendField("{{ "End" | trans }}")
        .appendField(new Blockly.FieldTextInput("23:59:59"), "END");
    this.appendDummyInput()
        .setAlign(Blockly.ALIGN_RIGHT)
        .appendField("{{ "When holiday" | trans }}")
        .appendField(new Blockly.FieldDropdown([["suppress", "suppress"], ["ignore_holiday", "ignore_holiday"], ["previous_non_holiday", "previous_non_holiday"], ["next_non_holiday", "next_non_holiday"]]), "WHEN_HOLIDAY");
    this.appendDummyInput()
        .setAlign(Blockly.ALIGN_RIGHT)
        .appendField("{{ "Let run" | trans }}")
        .appendField(new Blockly.FieldCheckbox("TRUE"), "LET_RUN");
    this.setInputsInline(false);
    this.setPreviousStatement(true, null);
    this.setNextStatement(true, null);
    this.setColour({{ color_schedule }});
    this.setTooltip('');
    this.setHelpUrl('http://www.sos-berlin.com/doc/en/scheduler.doc/xml/period.xml');
  }
};

Blockly.JobScheduler['period.repeat'] = function(block) {
  var dropdown_start_type = block.getFieldValue('REPEAT_TYPE');
  var text_start_time = block.getFieldValue('REPEAT');
  var text_begin = block.getFieldValue('BEGIN');
  var text_end = block.getFieldValue('END');
  var checkbox_let_run = block.getFieldValue('LET_RUN') == 'TRUE';
  var dropdown_when_holiday = block.getFieldValue('WHEN_HOLIDAY');
  var code = '<period\n';
    switch (dropdown_start_type) {
        case 'REPEAT':
            code += '   repeat="'+text_start_time+'"\n';
            break;
        case 'ABSOLUTE_REPEAT':
            code += '   absolute_repeat="'+text_start_time+'"\n';
            break;
    }
    if (text_begin!='')
        code += '   begin="'+text_begin+'"\n';
    if (text_end!='')
        code += '   end="'+text_end+'"\n';
    if (checkbox_let_run!='')
        code += '   let_run="'+checkbox_let_run+'"\n';
    if (dropdown_when_holiday!='')
        code += '   when_holiday="'+dropdown_when_holiday+'"\n';        
        code += '/>\n';
  return code;
};


// https://blockly-demo.appspot.com/static/demos/blockfactory/index.html#oxh9az
Blockly.Blocks['date'] = {
  init: function() {
    this.appendDummyInput()
        .appendField("date")
        .appendField(new Blockly.FieldTextInput(""), "DATE");
    this.appendDummyInput()
        .setAlign(Blockly.ALIGN_RIGHT)
        .appendField("begin")
        .appendField(new Blockly.FieldTextInput(""), "BEGIN");
    this.appendDummyInput()
        .setAlign(Blockly.ALIGN_RIGHT)
        .appendField("end")
        .appendField(new Blockly.FieldTextInput(""), "END");
    this.appendStatementInput("PERIOD")
        .setCheck(null)
        .setAlign(Blockly.ALIGN_RIGHT)
        .appendField("period");
    this.setInputsInline(false);
    this.setPreviousStatement(true, null);
    this.setNextStatement(true, null);
    this.setColour({{ color_schedule }});
    this.setTooltip('');
    this.setHelpUrl('http://www.sos-berlin.com/doc/en/scheduler.doc/xml/date.xml');
  }
};

Blockly.JobScheduler['date'] = function(block) {
  var text_date = block.getFieldValue('DATE');
  var text_begin = block.getFieldValue('BEGIN');
  var text_end = block.getFieldValue('END');
  var statements_period = Blockly.JobScheduler.statementToCode(block, 'PERIOD');
  var code = '<date\n';
    if (text_date!='')
        code += '   date="'+text_date+'"\n';
    if (text_begin!='')
        code += '   begin="'+text_begin+'"\n';
    if (text_end!='')
        code += '   end="'+text_end+'"\n';
    code += statements_period;
    code += '/>\n';
  return code;
};

// https://blockly-demo.appspot.com/static/demos/blockfactory/index.html#w9t2d4
Blockly.Blocks['weekdays.times'] = {
  init: function() {
    this.appendDummyInput()
        .appendField("weekdays");
    this.appendStatementInput("WEEKDAY")
        .setCheck(null)
        .setAlign(Blockly.ALIGN_RIGHT)
        .appendField("weekday");
    this.setInputsInline(true);
    this.setPreviousStatement(true, null);
    this.setNextStatement(true, null);
    this.setColour({{ color_schedule }});
    this.setTooltip('');
    this.setHelpUrl('http://www.example.com/');
  }
};

Blockly.JobScheduler['weekdays.times'] = function(block) {
  var statements_weekday = Blockly.JobScheduler.statementToCode(block, 'WEEKDAY');
  var code = '<weekdays>\n';
    code += statements_weekday;
    code += '</weekdays>\n';
  return code;
};

// https://blockly-demo.appspot.com/static/demos/blockfactory/index.html#siswws
Blockly.Blocks['weekdays'] = {
  init: function() {
    this.appendDummyInput()
        .appendField("{{ "Week days" | trans }}");
    this.appendDummyInput()
        .setAlign(Blockly.ALIGN_RIGHT)
        .appendField("{{ "Monday" | trans }}")
        .appendField(new Blockly.FieldCheckbox("FALSE"), "1");
    this.appendDummyInput()
        .setAlign(Blockly.ALIGN_RIGHT)
        .appendField("{{ "Tuesday" | trans }}")
        .appendField(new Blockly.FieldCheckbox("FALSE"), "2");
    this.appendDummyInput()
        .setAlign(Blockly.ALIGN_RIGHT)
        .appendField("{{ "Wednesday" | trans }}")
        .appendField(new Blockly.FieldCheckbox("FALSE"), "3");
    this.appendDummyInput()
        .setAlign(Blockly.ALIGN_RIGHT)
        .appendField("{{ "Thursday" | trans }}")
        .appendField(new Blockly.FieldCheckbox("FALSE"), "4");
    this.appendDummyInput()
        .setAlign(Blockly.ALIGN_RIGHT)
        .appendField("{{ "Friday" | trans }}")
        .appendField(new Blockly.FieldCheckbox("FALSE"), "5");
    this.appendDummyInput()
        .setAlign(Blockly.ALIGN_RIGHT)
        .appendField("{{ "Saturday" | trans }}")
        .appendField(new Blockly.FieldCheckbox("FALSE"), "6");
    this.appendDummyInput()
        .setAlign(Blockly.ALIGN_RIGHT)
        .appendField("{{ "Sunday" | trans }}")
        .appendField(new Blockly.FieldCheckbox("FALSE"), "0");
    this.appendStatementInput("PERIOD")
        .setCheck(null)
        .setAlign(Blockly.ALIGN_RIGHT)
        .appendField("{{ "Period" | trans }}");
    this.setInputsInline(true);
    this.setPreviousStatement(true, null);
    this.setNextStatement(true, null);
    this.setColour({{ color_schedule }});
    this.setTooltip('');
    this.setHelpUrl('http://www.example.com/');
  }
};

Blockly.JobScheduler['weekdays'] = function(block) {
  var statements_period = Blockly.JobScheduler.statementToCode(block, 'PERIOD');
    var Days = [];    
    ['0','1','2','3','4','5','6'].forEach(function(i) {
        if (block.getFieldValue(i) == 'TRUE') 
            Days.push(i);
    });
  var code = '<weekdays>\n';
        code += '<day day="'+Days.join(' ')+'">\n';
	code += statements_period;
	code += '</day>\n';
        code += '</weekdays>\n';
  return code;
};

Blockly.Blocks['specific_weekdays'] = {
  init: function() {
    this.appendDummyInput()
        .appendField("{{ "Specific weekday" | trans }}");
    this.appendDummyInput()
        .setAlign(Blockly.ALIGN_RIGHT)
        .appendField("{{ "Day" | trans }}")
        .appendField(new Blockly.FieldDropdown( [["{{ "Monday" | trans }}", "1"],  ["{{ "Tuesday" | trans }}", "2"], [ "{{ "Wednesday" | trans }}", "3"],[ "{{ "Thursday" | trans }}", "4"], ["{{ "Friday" | trans }}", "5"], ["{{ "Saturday" | trans }}", "6"], [ "{{ "Sunday" | trans }}", "7"]]), "DAY");
    this.appendDummyInput()
        .setAlign(Blockly.ALIGN_RIGHT)
        .appendField("{{ "Place" | trans }}")
        .appendField(new Blockly.FieldDropdown([["{{ "First" | trans }}", "1"], ["{{ "Second" | trans }}", "2"], ["{{ "Third" | trans }}", "3"], ["{{ "Fourth" | trans }}", "4"], ["{{ "Last" | trans }}", "-1"], ["{{ "Second last" | trans }}", "-2"], ["{{ "Third last" | trans }}", "-3"], ["{{ "Fourth last" | trans }}", "-4"]]), "WHICH");
    this.appendStatementInput("PERIOD")
        .setCheck(null)
        .setAlign(Blockly.ALIGN_RIGHT)
        .appendField("{{ "Period" | trans }}");
    this.setInputsInline(true);
    this.setPreviousStatement(true, null);
    this.setNextStatement(true, null);
    this.setColour({{ color_schedule }});
    this.setTooltip('');
    this.setHelpUrl('http://www.example.com/');
  }
};

Blockly.JobScheduler['specific_weekdays'] = function(block) {
  var dropdown_day = block.getFieldValue('DAY');
  var dropdown_which = block.getFieldValue('WHICH');
  var statements_period = Blockly.JobScheduler.statementToCode(block, 'PERIOD');
  var code = '<monthdays>\n';
        code += '<weekday day="'+dropdown_day+'" which="'+dropdown_which+'">\n';
        code += statements_period;
        code += '</weekday>\n';
        code += '</monthdays>\n';
  return code;
};

Blockly.Blocks['months'] = {
  init: function() {
    this.appendDummyInput()
        .appendField("{{ "Months" | trans }}");
    this.appendDummyInput()
        .setAlign(Blockly.ALIGN_RIGHT)
        .appendField("{{ "January" | trans }}")
        .appendField(new Blockly.FieldCheckbox("FALSE"), "january");
    this.appendDummyInput()
        .setAlign(Blockly.ALIGN_RIGHT)
        .appendField("{{ "February" | trans }}")
        .appendField(new Blockly.FieldCheckbox("FALSE"), "february");
    this.appendDummyInput()
        .setAlign(Blockly.ALIGN_RIGHT)
        .appendField("{{ "March" | trans }}")
        .appendField(new Blockly.FieldCheckbox("FALSE"), "march");
    this.appendDummyInput()
        .setAlign(Blockly.ALIGN_RIGHT)
        .appendField("{{ "April" | trans }}")
        .appendField(new Blockly.FieldCheckbox("FALSE"), "april");
    this.appendDummyInput()
        .setAlign(Blockly.ALIGN_RIGHT)
        .appendField("{{ "May" | trans }}")
        .appendField(new Blockly.FieldCheckbox("FALSE"), "may");
    this.appendDummyInput()
        .setAlign(Blockly.ALIGN_RIGHT)
        .appendField("{{ "June" | trans }}")
        .appendField(new Blockly.FieldCheckbox("FALSE"), "june");
    this.appendDummyInput()
        .setAlign(Blockly.ALIGN_RIGHT)
        .appendField("{{ "July" | trans }}")
        .appendField(new Blockly.FieldCheckbox("FALSE"), "july");
    this.appendDummyInput()
        .setAlign(Blockly.ALIGN_RIGHT)
        .appendField("{{ "August" | trans }}")
        .appendField(new Blockly.FieldCheckbox("FALSE"), "august");
    this.appendDummyInput()
        .setAlign(Blockly.ALIGN_RIGHT)
        .appendField("{{ "September" | trans }}")
        .appendField(new Blockly.FieldCheckbox("FALSE"), "september");
    this.appendDummyInput()
        .setAlign(Blockly.ALIGN_RIGHT)
        .appendField("{{ "October" | trans }}")
        .appendField(new Blockly.FieldCheckbox("FALSE"), "october");
    this.appendDummyInput()
        .setAlign(Blockly.ALIGN_RIGHT)
        .appendField("{{ "November" | trans }}")
        .appendField(new Blockly.FieldCheckbox("FALSE"), "november");
    this.appendDummyInput()
        .setAlign(Blockly.ALIGN_RIGHT)
        .appendField("{{ "December" | trans }}")
        .appendField(new Blockly.FieldCheckbox("FALSE"), "december");
    this.appendStatementInput("DAYS")
        .setCheck(null)
        .setAlign(Blockly.ALIGN_RIGHT)
        .appendField("{{ "Days" | trans }}");
    this.appendStatementInput("PERIOD")
        .setCheck(null)
        .setAlign(Blockly.ALIGN_RIGHT)
        .appendField("Period");
    this.setInputsInline(true);
    this.setPreviousStatement(true, null);
    this.setNextStatement(true, null);
    this.setColour({{ color_schedule }});
    this.setTooltip('');
    this.setHelpUrl('http://www.example.com/');
  }
};

Blockly.JobScheduler['months'] = function(block) {
    var Months = [];
    ['january','february','march','april','may','june','july','august','september','october','november','december'].forEach(function(i) {
        if (block.getFieldValue(i) == 'TRUE') 
            Months.push(i);
    });
  var statements_period = Blockly.JobScheduler.statementToCode(block, 'PERIOD');
  var statements_days = Blockly.JobScheduler.statementToCode(block, 'DAYS');
  var code = '<month month="';
        code += Months.join(' ');
        code += '">\n';
	code += statements_period;
	code += statements_days;        
	code += '</month>\n';
  return code;
};

Blockly.Blocks['run_time.months'] = {
  init: function() {
    this.appendDummyInput()
        .appendField("{{ "Run time" | trans }} ({{ "Months" | trans }})");
    this.appendDummyInput()
        .setAlign(Blockly.ALIGN_RIGHT)
        .appendField("{{ "January" | trans }}")
        .appendField(new Blockly.FieldCheckbox("FALSE"), "january");
    this.appendDummyInput()
        .setAlign(Blockly.ALIGN_RIGHT)
        .appendField("{{ "February" | trans }}")
        .appendField(new Blockly.FieldCheckbox("FALSE"), "february");
    this.appendDummyInput()
        .setAlign(Blockly.ALIGN_RIGHT)
        .appendField("{{ "March" | trans }}")
        .appendField(new Blockly.FieldCheckbox("FALSE"), "march");
    this.appendDummyInput()
        .setAlign(Blockly.ALIGN_RIGHT)
        .appendField("{{ "April" | trans }}")
        .appendField(new Blockly.FieldCheckbox("FALSE"), "april");
    this.appendDummyInput()
        .setAlign(Blockly.ALIGN_RIGHT)
        .appendField("{{ "May" | trans }}")
        .appendField(new Blockly.FieldCheckbox("FALSE"), "may");
    this.appendDummyInput()
        .setAlign(Blockly.ALIGN_RIGHT)
        .appendField("{{ "June" | trans }}")
        .appendField(new Blockly.FieldCheckbox("FALSE"), "june");
    this.appendDummyInput()
        .setAlign(Blockly.ALIGN_RIGHT)
        .appendField("{{ "July" | trans }}")
        .appendField(new Blockly.FieldCheckbox("FALSE"), "july");
    this.appendDummyInput()
        .setAlign(Blockly.ALIGN_RIGHT)
        .appendField("{{ "August" | trans }}")
        .appendField(new Blockly.FieldCheckbox("FALSE"), "august");
    this.appendDummyInput()
        .setAlign(Blockly.ALIGN_RIGHT)
        .appendField("{{ "September" | trans }}")
        .appendField(new Blockly.FieldCheckbox("FALSE"), "september");
    this.appendDummyInput()
        .setAlign(Blockly.ALIGN_RIGHT)
        .appendField("{{ "October" | trans }}")
        .appendField(new Blockly.FieldCheckbox("FALSE"), "october");
    this.appendDummyInput()
        .setAlign(Blockly.ALIGN_RIGHT)
        .appendField("{{ "November" | trans }}")
        .appendField(new Blockly.FieldCheckbox("FALSE"), "november");
    this.appendDummyInput()
        .setAlign(Blockly.ALIGN_RIGHT)
        .appendField("{{ "December" | trans }}")
        .appendField(new Blockly.FieldCheckbox("FALSE"), "december");
    this.appendStatementInput("DAYS")
        .setCheck(null)
        .setAlign(Blockly.ALIGN_RIGHT)
        .appendField("{{ "Days/Time" | trans }}");
    this.setInputsInline(true);
    this.setPreviousStatement(true, null);
    this.setNextStatement(true, null);
    this.setColour({{ color_schedule }});
    this.setTooltip('');
    this.setHelpUrl('http://www.example.com/');
  }
};

Blockly.JobScheduler['run_time.months'] = function(block) {
    var Months = [];
    ['january','february','march','april','may','june','july','august','september','october','november','december'].forEach(function(i) {
        if (block.getFieldValue(i) == 'TRUE') 
            Months.push(i);
    });
  var statements_period = Blockly.JobScheduler.statementToCode(block, 'PERIOD');
  var statements_days = Blockly.JobScheduler.statementToCode(block, 'DAYS');
  var code = '<run_time>';
        code += '<month month="'+Months.join(' ')+'">\n';
	code += statements_days;        
	code += '</month>\n';
        code += '</run_time>\n';
  return code;
};

Blockly.Blocks['monthdays'] = {
  init: function() {
    this.appendDummyInput()
        .appendField("{{ "Month days" | trans }}");
    var i;
    for(i=1;i<32;i++) {
        this.appendDummyInput()
            .setAlign(Blockly.ALIGN_RIGHT)
            .appendField(i.toString())
            .appendField(new Blockly.FieldCheckbox("FALSE"), i.toString());
    }
    this.appendStatementInput("PERIOD")
        .setCheck(null)
        .setAlign(Blockly.ALIGN_RIGHT)
        .appendField("{{ "Period" | trans }}");
    this.setInputsInline(true);
    this.setPreviousStatement(true, null);
    this.setNextStatement(true, null);
    this.setColour({{ color_schedule }});
    this.setTooltip('');
    this.setHelpUrl('http://www.example.com/');
  }
};

Blockly.JobScheduler['monthdays'] = function(block) {
  var checkbox_1 = block.getFieldValue('1') == 'TRUE';
  var statements_period = Blockly.JobScheduler.statementToCode(block, 'PERIOD');
  var Days = [];    
    for(i=1;i<32;i++) {
        if (block.getFieldValue(i.toString()) == 'TRUE') 
            Days.push(i.toString());
    }
  var code = '<monthdays>\n'
        code += '<day day="'+Days.join(' ')+'">\n';
	code += statements_period;
	code += '</day>\n';
	code += '</monthdays>\n';
  return code;
};

Blockly.Blocks['ultimos'] = {
  init: function() {
    this.appendDummyInput()
        .appendField("{{ "Ultimos" | trans }}");
    var i;
    for(i=1;i<32;i++) {
        this.appendDummyInput()
            .setAlign(Blockly.ALIGN_RIGHT)
            .appendField(i.toString())
            .appendField(new Blockly.FieldCheckbox("FALSE"), i.toString());
    }
    this.appendStatementInput("PERIOD")
        .setCheck(null)
        .setAlign(Blockly.ALIGN_RIGHT)
        .appendField("{{ "Period" | trans }}");
    this.setInputsInline(true);
    this.setPreviousStatement(true, null);
    this.setNextStatement(true, null);
    this.setColour({{ color_schedule }});
    this.setTooltip('');
    this.setHelpUrl('http://www.example.com/');
  }
};

Blockly.JobScheduler['ultimos'] = function(block) {
  var checkbox_1 = block.getFieldValue('1') == 'TRUE';
  var statements_period = Blockly.JobScheduler.statementToCode(block, 'PERIOD');
  var Days = [];    
    for(i=1;i<32;i++) {
        if (block.getFieldValue(i.toString()) == 'TRUE') 
            Days.push(i.toString());
    }  
  var code = '<ultimos>\n'
        code += '<day day="'+Days.join(' ')+'">\n';
	code += statements_period;
	code += '</day>\n';
	code += '</ultimos>\n';
  return code;

};


// https://blockly-demo.appspot.com/static/demos/blockfactory/index.html#rjf6jw
Blockly.Blocks['holidays'] = {
  init: function() {
    this.appendDummyInput()
        .appendField("{{ "Holidays" | trans }}");
    this.appendDummyInput()
        .setAlign(Blockly.ALIGN_RIGHT)
        .appendField("{{ "Monday" | trans }}")
        .appendField(new Blockly.FieldCheckbox("FALSE"), "1");
    this.appendDummyInput()
        .setAlign(Blockly.ALIGN_RIGHT)
        .appendField("{{ "Tuesday" | trans }}")
        .appendField(new Blockly.FieldCheckbox("FALSE"), "2");
    this.appendDummyInput()
        .setAlign(Blockly.ALIGN_RIGHT)
        .appendField("{{ "Wednesday" | trans }}")
        .appendField(new Blockly.FieldCheckbox("FALSE"), "3");
    this.appendDummyInput()
        .setAlign(Blockly.ALIGN_RIGHT)
        .appendField("{{ "Thursday" | trans }}")
        .appendField(new Blockly.FieldCheckbox("FALSE"), "4");
    this.appendDummyInput()
        .setAlign(Blockly.ALIGN_RIGHT)
        .appendField("{{ "Friday" | trans }}")
        .appendField(new Blockly.FieldCheckbox("FALSE"), "5");
    this.appendDummyInput()
        .setAlign(Blockly.ALIGN_RIGHT)
        .appendField("{{ "Saturday" | trans }}")
        .appendField(new Blockly.FieldCheckbox("FALSE"), "6");
    this.appendDummyInput()
        .setAlign(Blockly.ALIGN_RIGHT)
        .appendField("{{ "Sunday" | trans }}")
        .appendField(new Blockly.FieldCheckbox("FALSE"), "0");
    this.appendStatementInput("HOLIDAY")
        .setCheck(null)
        .setAlign(Blockly.ALIGN_RIGHT)
        .appendField("{{ "Dates" | trans }}");
    this.appendValueInput("INCLUDE")
        .setCheck(null)
        .setAlign(Blockly.ALIGN_RIGHT)
        .appendField("include");
    this.setInputsInline(true);
    this.setPreviousStatement(true, null);
    this.setNextStatement(true, null);
    this.setColour({{ color_schedule }});
    this.setTooltip('');
    this.setHelpUrl('http://www.example.com/');
  }
};

Blockly.JobScheduler['holidays'] = function(block) {
  var statements_holiday = Blockly.JobScheduler.statementToCode(block, 'HOLIDAY');
  var value_include = Blockly.JobScheduler.valueToCode(block, 'INCLUDE', Blockly.JobScheduler.ORDER_NONE);
    var Days = [];    
    ['0','1','2','3','4','5','6'].forEach(function(i) {
        if (block.getFieldValue(i) == 'TRUE') 
            Days.push(i);
    });
  var code = '<holidays>\n';
    code += '<weekdays>\n';
    code += '<day day="'+Days.join(' ')+'"/>\n';
    code += '</weekdays>\n';
    code += statements_holiday;
    code += value_include; 
    code += '</holidays>\n';
  return code;
};

Blockly.Blocks['holiday'] = {
  init: function() {
    this.appendDummyInput()
        .appendField("{{ "Date" | trans }}")
        .appendField(new Blockly.FieldTextInput(""), "DATE");
    this.setInputsInline(false);
    this.setPreviousStatement(true, null);
    this.setNextStatement(true, null);
    this.setColour({{ color_schedule }});
    this.setTooltip('');
    this.setHelpUrl('http://www.sos-berlin.com/doc/en/scheduler.doc/xml/date.xml');
  }
};

Blockly.JobScheduler['holiday'] = function(block) {
  var text_date = block.getFieldValue('DATE');
  var code = '<holiday date="'+text_date+'"/>\n';
  return code;
};

// Liste des scripts
{% for script in scripts %}

// https://blockly-demo.appspot.com/static/demos/blockfactory/index.html#6jhdvs
Blockly.Blocks['USER_{{ script.label }}'] = {
  init: function() {
    this.appendValueInput("script_param")
        .appendField("Script")
        .setAlign(Blockly.ALIGN_RIGHT)
        .appendField(new Blockly.FieldTextInput("{{ script.file }}"), "CODE");
    this.setPreviousStatement(true, null);
    this.setNextStatement(false, null);
    this.setColour({{ color_action }});
    this.setTooltip('');
    this.setHelpUrl('http://www.example.com/');
  }
};

Blockly.JobScheduler['USER_{{ script.label }}'] = function(block) {
  var text_code = block.getFieldValue('CODE');
  var value_script_param = Blockly.JobScheduler.valueToCode(block, 'INCLUDE_PARAMS', Blockly.JobScheduler.ORDER_NONE);
  var code =  '<script  language="';
        switch ("{{ script.lang }}") {
                case 'bat':
                case 'shell':
                        code += 'shell';
                        break;
                default:
                        code += '{{ script.lang }}';
        }
	code += '">\n';
	code += '<![CDATA[';
	code += Base64.decode("{{ script.code }}");
	if (value_script_param!='') {
		switch ("{{ script.lang }}") {
			case 'bat':
				code += ' %SCHEDULER_PARAM_'+value_script_param.trim().toUpperCase()+'%';
				break;
			case 'shell':
				code += ' ${SCHEDULER_PARAM_'+value_script_param.trim().toUpperCase()+'}';
				break;
			default:
				code += value_script_param;
		}
	}
	code +=']]>\n';
	code += '<\/script>\n';
  return code;
};
{% endfor %}

dhtmlxEvent(window,"load",function(){
    
    globalLayout = new dhtmlXLayoutObject(document.body,"3W");  
    globalLayout.cells("a").setWidth(350); 
    globalLayout.cells("a").hideHeader(); 
    globalLayout.cells("b").hideHeader();

    globalMenu = globalLayout.cells("a").attachMenu();
    globalMenu.setIconsPath( "{{ asset('/bundles/ariicore/images/menu/') }}" );
    globalMenu.loadStruct("{{ url('xml_menu') }}?route={{ app.request.attributes.get('_route') }}");

    myRibbon = globalLayout.cells("a").attachRibbon(); 
    myRibbon.setIconPath( "{{ asset('/bundles/ariicore/images/ribbon/') }}" );
    myRibbon.loadStruct("{{ url('json_Blockly_ribbon') }}", function() {
        myRibbon.setItemState("1", false);
        myRibbon.setItemState("2", false);
        myRibbon.setItemState("3", false);
        myRibbon.setItemState("{{ level }}",true)
    });
    myRibbon.attachEvent("onStateChange", StateRibbon );
    myRibbon.attachEvent("onClick", ClickRibbon );
            
    myGridToolbar = globalLayout.cells("b").attachToolbar();
    myGridToolbar.setIconsPath("{{ asset('bundles/ariicore/images/toolbar/') }}");
    myGridToolbar.loadStruct( "{{ url('xml_Blockly_toolbar') }}");

    myGrid = globalLayout.cells("a").attachGrid();
    myGrid.setImagePath( "{{ asset('bundles/ariicore/images/treegrid/') }}");
    myGrid.setHeader("#text_filter");
    myGrid.setColSorting("str");
    myGrid.init();
    myGrid.load( "{{ url('xml_Blockly_list') }}");

    globalLayout.cells("b").attachObject("blocklyDiv");
    globalLayout.cells("c").collapse();
    globalLayout.cells("c").hideHeader();
    
    blocklyArea = document.getElementById('blocklyArea');
    blocklyDiv = document.getElementById('blocklyDiv');

    workspace = Blockly.inject( blocklyDiv,
        {
            toolbox: document.getElementById('toolbox'),
            grid:
                    {spacing: 20,
                     length: 3,
                     colour: '#ccc',
                     snap: true},
            zoom:
                {
                    controls: true,
                    wheel: true,
                    startScale: 1.0,
                    maxScale: 3,
                    minScale: 0.3,
                    scaleSpeed: 1.2
                },
            trashcan: true
        });

    workspace.addChangeListener(myUpdateFunction);

    myGridToolbar.attachEvent("onClick",function(itemid){
         switch (itemid) {
            case 'save':
                globalLayout.cells("a").progressOn();
                var xml = Blockly.Xml.domToText( Blockly.Xml.workspaceToDom(Blockly.mainWorkspace));
                var code = Blockly.JobScheduler.workspaceToCode(workspace);
                name = this.getValue('name');
                // alert("{{ url('arii_Blockly_save') }}?name="+encodeURIComponent(name)+"&xml="+encodeURIComponent(xml)+"&code="+encodeURIComponent(code));
                dhx4.ajax.post("{{ url('arii_Blockly_save') }}","name="+encodeURIComponent(name)+"&xml="+encodeURIComponent(xml)+"&code="+encodeURIComponent(code),function(loader,response){
                    dhtmlx.message({
                    type: "Notice",
                    expire: 10000,
                    width: "500px",
                    text: loader.xmlDoc.responseText });
                    myGrid.load( "{{ url('xml_Blockly_list') }}");
                    globalLayout.cells("a").progressOff();
                });                
                break;
            case 'clear':
                dhtmlx.confirm({
                title: "{{ "Delete" | trans }}",
                type: "confirm-error",
                text: "{{ "Are you sure ?" | trans }}",
                callback: function(answer) { 
                    if (answer) {  
                        workspace.clear();
                    }
                },
                cancel: "{{ "No" | trans }}",
                ok: "{{ "Yes" | trans }}" });
                break;
            case 'deploy':
                var code = Blockly.JobScheduler.workspaceToCode(workspace);
                // alert("{{ url('arii_Blockly_deploy') }}?name="+encodeURIComponent(name)+"&code="+encodeURIComponent(code));
                dhx4.ajax.post("{{ url('arii_Blockly_deploy') }}","name="+encodeURIComponent(name)+"&code="+encodeURIComponent(code),function(loader,response){
                    dhtmlx.message({
                    type: "Notice",
                    expire: 10000,
                    width: "500px",
                    text: loader.xmlDoc.responseText });
                });                
                break;
            default:
                alert(itemid);
                break;
        }
    });
    myGridToolbar.attachEvent("onStateChange",function(itemid,state){
         switch (itemid) {
             case 'code':
                if (state) {
                    globalLayout.cells("c").expand();
                }
                else {
                    globalLayout.cells("c").collapse();
                }
                globalLayout.cells("c").hideHeader();
                Resize();
                break;
            default:
                alert(itemid+' '+state);
                break;
        }
    });
    
    myGrid.attachEvent("onRowDblClicked", function(id){
        myGridToolbar.setValue('name',id );
        globalLayout.cells("b").progressOff();
        // alert("{{ url('xml_Blockly_get') }}?name="+encodeURIComponent(id));
        dhx4.ajax.post("{{ url('xml_Blockly_get') }}","name="+encodeURIComponent(id),function(loader,response){
            var xml = Blockly.Xml.textToDom(loader.xmlDoc.responseText);
            // alert(loader.xmlDoc.responseText);
            workspace.clear();
            Blockly.Xml.domToWorkspace(xml, workspace);
            
              var code = Blockly.JobScheduler.workspaceToCode(workspace);
  code = code.replace(/</g, "&lt;"); 
  code = code.replace(/\n/g, "<br/>"); 
  code += code.replace(/ /g, "&nbsp;"); 

    globalLayout.cells("c").attachHTMLString('<pre>'+code+'</pre>');    
            globalLayout.cells("b").progressOff();
        });  
    });
    
    globalLayout.cells("c").hideHeader();
/*    
    myCodeToolbar = globalLayout.cells("c").attachToolbar();
    myCodeToolbar.setIconsPath("{{ asset('bundles/ariicore/images/toolbar/') }}");
    myCodeToolbar.loadStruct( "{{ url('xml_Blockly_toolbar_check') }}");

    myCodeToolbar.attachEvent("onClick",function(itemid){
         switch (itemid) {
            case 'check':
                globalLayout.cells("c").progressOn();
                var code = Blockly.JobScheduler.workspaceToCode(workspace);
                dhx4.ajax.post("{{ url('arii_Blockly_check') }}","code="+encodeURIComponent(code),function(loader,response){
                    dhtmlx.message({
                    type: "Notice",
                    expire: 10000,
                    width: "500px",
                    text: loader.xmlDoc.responseText });
                    globalLayout.cells("c").progressOff();
                });                
                break;
            default:
                alert(itemid);
        }        
    });
*/    
});

dhtmlxEvent(window,"resize",Resize);

function Resize() {     
    var element = blocklyArea;
    var x = 0;
    var y = 0;
    do {
      x += element.offsetLeft;
      y += element.offsetTop;
      element = element.offsetParent;
    } while (element);
    // Position blocklyDiv over blocklyArea.
    blocklyDiv.style.left = x + 'px';
    blocklyDiv.style.top = y + 'px';
    blocklyDiv.style.width = blocklyArea.offsetWidth + 'px';
    blocklyDiv.style.height = blocklyArea.offsetHeight + 'px';
}

function myUpdateFunction(event) {
  var code = Blockly.JobScheduler.workspaceToCode(workspace);
  code = code.replace(/</g, "&lt;"); 
  code = code.replace(/\n/g, "<br/>"); 
  code = code.replace(/ /g, "&nbsp;"); 

  globalLayout.cells("c").attachHTMLString('<pre>'+code+'</pre>');    
//  myTabbar.cells("javascript").attachHTMLString('<pre>'+Blockly.JavaScript.workspaceToCode(workspace)+'</pre>');
//  myTabbar.cells("php").attachHTMLString('<pre>'+Blockly.PHP.workspaceToCode(workspace)+'</pre>');
  
//  var xml = Blockly.Xml.workspaceToDom(Blockly.mainWorkspace);
//  var xml_text = Blockly.Xml.domToPrettyText(xml);  
//  myTabbar.cells("xml").attachHTMLString('<pre>'+xml_text.replace(/</g, "&lt;")+'</pre>');
}

function GlobalRefresh() {
}

function FileStart(name,type) {
    return '\n<!--START['+name+'.'+type+'.xml]-->\n<?xml version="1.0" encoding="ISO-8859-1"?>\n';
}

function FileEnd(name,type) {
    return '<!--END['+name+'.'+type+'.xml]-->\n';
}

</script>
{% endblock %}
